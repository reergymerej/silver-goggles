commit 6611b02a51e8bd15f7559dcf725cda5803c6a21b
Author: Jeremy Greer <jeremy.greer.atl@gmail.com>
Date:   Sun Nov 19 06:25:15 2017 -0600

    move ParsedCommantary and constants into own files

diff --git a/src/Entry.js b/src/Entry.js
index 81dda61..395b8e4 100644
--- a/src/Entry.js
+++ b/src/Entry.js
@@ -1,64 +1,6 @@
 import React from 'react'
-import GitRefBlock from './GitRefBlock'
-
-const TYPE = {
-  TEXT: 'TEXT',
-  GIT: 'GIT',
-}
-
-const parseCommentary = (commentary) => {
-  const gitRegex = /(ref:git:[a-z0-9]+)/gi
-  const hashRegex = /ref:git:([a-z0-9]+)/gi
-  const parts = commentary.split(gitRegex)
-  return parts
-    .map(part => {
-      const hashExec = hashRegex.exec(part)
-      const commitHash = hashExec && hashExec[1]
-      const type = commitHash ? TYPE.GIT : TYPE.TEXT
-      const value = type === TYPE.GIT ? commitHash : part
-      return {
-        type,
-        value,
-      }
-    })
-}
-
-const TextBlock = (props) => (
-  <pre>
-    {props.value}
-  </pre>
-)
-
-class ParsedCommentary extends React.Component {
-  handleBlockTypeClick = value => {
-    // We don't actually need this middleman step here, since it just calls the
-    // handler with the same thing, but I want to be explicit for now.
-    this.props.onCommitSelected(value)
-  }
-
-  render() {
-    const { props } = this
-    const parsedCommentaryBlocks = parseCommentary(props.commentary)
-    return (
-      <div>
-        {
-          parsedCommentaryBlocks.map((block, i) => {
-            const BlockType = block.type === TYPE.TEXT
-              ? TextBlock
-              : GitRefBlock
-            return (
-              <BlockType
-                key={i}
-                value={block.value}
-                onClick={this.handleBlockTypeClick}
-              />
-            )
-          })
-        }
-      </div>
-    )
-  }
-}
+import { TYPE } from './constants'
+import ParsedCommentary from './ParsedCommentary'
 
 class Entry extends React.Component {
   handleCommitSelected = value => {
diff --git a/src/ParsedCommentary.js b/src/ParsedCommentary.js
new file mode 100644
index 0000000..ee6e7c7
--- /dev/null
+++ b/src/ParsedCommentary.js
@@ -0,0 +1,59 @@
+import React from 'react'
+import { TYPE } from './constants'
+import GitRefBlock from './GitRefBlock'
+
+const TextBlock = (props) => (
+  <pre>
+    {props.value}
+  </pre>
+)
+
+const parseCommentary = (commentary) => {
+  const gitRegex = /(ref:git:[a-z0-9]+)/gi
+  const hashRegex = /ref:git:([a-z0-9]+)/gi
+  const parts = commentary.split(gitRegex)
+  return parts
+    .map(part => {
+      const hashExec = hashRegex.exec(part)
+      const commitHash = hashExec && hashExec[1]
+      const type = commitHash ? TYPE.GIT : TYPE.TEXT
+      const value = type === TYPE.GIT ? commitHash : part
+      return {
+        type,
+        value,
+      }
+    })
+}
+
+class ParsedCommentary extends React.Component {
+  handleBlockTypeClick = value => {
+    // We don't actually need this middleman step here, since it just calls the
+    // handler with the same thing, but I want to be explicit for now.
+    this.props.onCommitSelected(value)
+  }
+
+  render() {
+    const { props } = this
+    const parsedCommentaryBlocks = parseCommentary(props.commentary)
+    return (
+      <div>
+        {
+          parsedCommentaryBlocks.map((block, i) => {
+            const BlockType = block.type === TYPE.TEXT
+              ? TextBlock
+              : GitRefBlock
+            return (
+              <BlockType
+                key={i}
+                value={block.value}
+                onClick={this.handleBlockTypeClick}
+              />
+            )
+          })
+        }
+      </div>
+    )
+  }
+}
+
+export default ParsedCommentary
diff --git a/src/constants.js b/src/constants.js
new file mode 100644
index 0000000..30558b7
--- /dev/null
+++ b/src/constants.js
@@ -0,0 +1,4 @@
+export const TYPE = {
+  TEXT: 'TEXT',
+  GIT: 'GIT',
+}
