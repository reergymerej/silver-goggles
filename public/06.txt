
Sat Nov 18 09:58:47 CST 2017

There are two issues I'm thinking of.  The first is how to record all the
data.  The second is how to present it.  I'm figuring out ways to manage the
first right now, but I'd like the presentation to work outside of how the data
is collected.  I don't want to dictate how it's done or what tools should be
used.  That's not really flexible.  So, although I'm figuring it out as I go,
I'll just skip over the recording part for now.

The second part, the presentation, is what I want to focus on.  We've already
got a way to read entries and show them in the browser, but let's do something
more elaborate.  At a basic level, each entry in the system will contain...


* commentary - This is the meat of the system.  This is what I'm writing now
  and will be the primary content.

* resources - Various types of additional content that enhance, and may be
  referenced by, the commentary.

** terminal logs - what I typed, what came out

** code - a Git log or something that can refer to code in a particular state

** images - screenshots gathered for the commentary

** web history - pages visited during the commentary


Eventually, I want a way to present all of these together and somehow synced
by time.  For starters, though, let's just put them all together.

How will we describe them to the system?

```
{
  "commentary": "blah blah blah",
  "resources": []
}
```

I want the resources grouped by type.

```
{
  "commentary": "blah blah blah",
  "resources": {
    "terminal": "blah blah blah",
    "code": "xxx",
    "images": [
    ],
    "web-history": [
    ],
  }
}
```

Some of these resource types will be ordered lists.  For consistency, let's
make them all ordered lists, even if they contain only one thing.


```
{
  "commentary": "blah blah blah",
  "resources": {
    "terminal": [
      "blah blah blah"
    ],
    "code": [
      "xxx"
    ],
    "images": [
      "xxx"
    ],
    "web-history": [
      "xxx"
    ],
  }
}
```

It is pretty easy to represent this stuff in the filesystem.  So we could have
each entry (commentary, blog... I've got to figure out the names for things)
reside in a directory.  That directory can optionally have subdirectories that
define the attached resources.

TODO: We'll have to standardize the resource names.

Before changing everything, let's rejigger the entries we spit out of our
`index-entries.js` script and make sure the UI can understand this new
structure.  Then we can go back and change how the entries are read by the
script.

ref: 9a4b976641859fc2ce81abd57ba696a32348059d

OK, this looks like a start.  Let's change the UI to show it the way we want.


Crap.  I just realized we lost the names of the entries.  That's OK for now.
They weren't meaningful.  We should probably allow for them in the future,
though.  Either using dates or allowing optional titles or something.

... There's no time like the present.  Let's add the name of the file for now.

https://nodejs.org/api/path.html#path_path_basename_path_ext

...

They data looks good, now let's get the entries rendering.

31c1362

Whoops.

```
Failed to compile
./src/App.js
Syntax error: Unexpected token (7:0)

   5 |
   6 | const Entry = () => (
>  7 | )
     | ^
   8 |
   9 | class App extends Component {
  10 |   state = {
```


ref: 36b4bc8

```
index.js:2177 Warning: Unknown event handler property `onPress`. It will be ignored.
    in a (at App.js:26)
    in div (at App.js:23)
    in App (at index.js:7)
__stack_frame_overlay_proxy_console__ @ index.js:2177
webpackHotDevClient.js:136 ./src/App.js
  Line 2:   'logo' is defined but never used                                                  no-unused-vars
  Line 26:  Links must not point to "#". Use a more descriptive href or use a button instead  jsx-a11y/href-no-hash
printWarnings @ webpackHotDevClient.js:136
```

It's ocurred to me that I'll probably want to share debugging stuff in the
browser.  How the heck can I do that?  Will it need to be a video?


error:

```
    at HTMLUnknownElement.callCallback (react-dom.development.js:540)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:579)
    at invokeGuardedCallback (react-dom.development.js:436)
    at renderRoot (react-dom.development.js:10386)
```

ref: 498a6e9


ref: 39ee381
OK, it's starting to look sane.

Now, since we don't know how to show the resources yet, let's just go back to
showing the basic commentary.
