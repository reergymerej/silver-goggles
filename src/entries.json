[{"name":"01","commentary":"So I was thinking I'd like to do something meaningful.  What in the world\ncould that be?  Helping people seems to universally work as a way to find\nmeaning.  What can I help with?  \"Here's a website.  It will help you!\"  I\ndon't know.\n\nMaybe starting a blog or some type of resource to help people learn to code\nwould be cool.  There is no shortage of blogs or tech articles out there,\nthough.  What could I do differently?\n\nOne thing you don't see is complete honesty.  It may be unprofessional and\nmaybe severely undermine confidence, but what if someone showed you their\nmistakes?  Not as a gag reel or some sort of ironic thing, but more as a\ncandid view.  That may make things more approachable.  Mistakes are valuable\nbecause you get to learn from them, so sharing your mistakes seems like it\nwould increase the value.\n\nSo, the idea is not to be an unpolished slacker, but to provide complete\nopenness along with instruction.  To start with, a blog probably shouldn't be\na finished, beautiful product.  It's basically an open journal, right?\nPunctuation and grammar are fine, but it should probably be pretty rough and\nraw.\n\nSo here, what the heck.  Let's start with this.  I'm not sure where I'm going,\nwhat the point is, or how it will turn out, but this is my project.  From\ninception to completion as transparent as possible, I'm going to document it.\n\n...\n\nIn the interest of _somewhat_ tolerable writing, I need to pick an audience,\nthough.  I'm going to imagine...\n\nWell, I trailed off imagining myself at different points in my life when I was\nlearing to program.\n\nScrew it.  I'm just going to talk to the terminal.  If I start talking to \"the\naudience\" the tone will change and I'll start worrying too much about _how_\nI'm saying things rather than _what_ I'm saying.\n\n...\n\nOK, so what are the goals?\n\n1.  Transparency - I want mistakes to be visible, ignorance to be highlighted,\nand the documentation to be off the cuff.  This is to show that even\nsuccessful dudes who have been writing and studying code for many years and\nare pretty good at what they do are just regular guys full of doubt,\nignorance, and potential mistakes.\n\n2.  Create a Blog - The blog should be super easy to update (to encourage it\nhappen regularly), provide lots of detail, and have very \"raw\" content.\n\nI would like to get something up ASAP, so that it doesn't all appear at once\nat the end of the project.  Honestly, most (practically all) of my projects\ndie the day after I start them.  I get really pumped, start working, get\nsidetracked with infrastructure or find another cooler idea along the way...\nThere's always something, so the sooner I can get this \"launched\" the better\nchange it has of surviving past next week.\n\n\nWhat's the absolute fastest way to get an app out there into the world?  This\nis not a paid promotion, but I bet I can get this into the world in the next\n10 minutes with CRA and Heroku.\n\nHere's the plan.\n\n1.  create the app\n2.  post this as static content\n3.  deploy as a new free app in Heroku\n\n\n(Side note: It's going to become a pain in the ass documenting all of this\nstuff.  Maybe I could just log the terminal history or something.)\n\n```\ncreate-react-app site\n```\n\nI may elaborate on all this stuff later, but maybe not.  There are plenty of\nsources out there already.\n\nThis file is 01.txt in the dir above the `site` dir I just created.\n\n```\n/Users/jeremygreer/Ideas/blog/\n▼ site/\n  ► public/\n  ► src/\n    package.json\n    README.md\n    yarn.lock\n  01.txt\n```\n\nI'm sure I'll have resources _other_ than the site, but now I need to move the\ntext into the site.  What if I just symlink it and keep it separate for now?\nI don't know what that may do.  Let's just keep it simple and move.\n\n```\n</jeremygreer/Ideas/blog/site/\n▼ public/\n    01.txt\n    favicon.ico\n    index.html\n    manifest.json\n► src/\n  package.json\n  README.md\n  yarn.lock\n```\n\nOK, simple.  For the first pass, we'll just have links from the main site to\nthe resource.  That's kind of cool.  I like the resources be just plain old\ntext.  That makes them portable (they should probably be markdown though).\n\n...\n\nI just added a link from the boilerplate to the text file.  That works for\nnow.  It's ocurred to me that I will be referencing code a _lot_ in this - and\nin particular states.  I'll need a good way to document that.  Let's just rely\non Git for now.\n\nThere.  Check 31b6c302d2ee643ef22e943a6b9a38dc891f1c0b to see where things\nstand for now.  I'll have to make this project public and actually push it to\nGithub.  Maybe there's a good convention for referencing SHAs in a blog.  I\ndon't want to keep making Gists ever 12 seconds.\n\n...\n\nI just created the repo with the suggested name.  I haven't done that in a\nwhile.  https://github.com/reergymerej/silver-goggles\n\nNow it's very public.  I hope work doesn't watch my commits in Github if I get\ninspired in the middle of the day to do a little writing.\n\n...\n\nI'm trying to login to Heroku with the toolbelt, but I'm seeing some weird\nerrors.\n\n```\n~/Ideas/blog/site$ heroku login\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n```\n\nI wonder if this is because of the High Sierra upgrade.  It smells like it, so\nI opened XCode because it needs to install dependencies and get my signature\non EULA and crap sometimes and I heard from work there may be something.  It\ncouldn't hurt.\n\nnope\n\nDoes it work from other directories where I used to use it?\n\nnope\n\nCan I reinstall it?  I think I used brew, but I'll just check Heroku.\n\n...wait...\n\nI've got down lots of rabbit holes.  This always happens.  What am I trying to\ndo?  Create an app in Heroku and get the URL.  I can do that through the GUI\neasily and figure out this crap later.\n\n...and done 1 minute later.\n\nI wonder if there's a way to timestamp each line of the text document.  That\nwould be cool to show _how long_ it takes to write the text.\n\n...\n\nDang it.\n\n```\n~/Ideas/blog/site$ git remote -v\norigin\tgit@github.com:reergymerej/silver-goggles.git (fetch)\norigin\tgit@github.com:reergymerej/silver-goggles.git (push)\n~/Ideas/blog/site$ git remote add heroku https://git.heroku.com/silver-goggles.git\n~/Ideas/blog/site$ git remote -v\nheroku\thttps://git.heroku.com/silver-goggles.git (fetch)\nheroku\thttps://git.heroku.com/silver-goggles.git (push)\norigin\tgit@github.com:reergymerej/silver-goggles.git (fetch)\norigin\tgit@github.com:reergymerej/silver-goggles.git (push)\n~/Ideas/blog/site$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\tmodified:   public/01.txt\n\n~/Ideas/blog/site$ fg\nnvim .\n\n[1]+  Stopped                 nvim .\n~/Ideas/blog/site$ git commit -m 'setup heroku remote'\n[master 5582472] setup heroku remote\n 1 file changed, 54 insertions(+)\n~/Ideas/blog/site$ git push heroku master\nremote: !\tYour account jeremy.greer@XXXXXXXXXXXXXXXX.com does not have access to silver-goggles.\nfatal: unable to access 'https://git.heroku.com/silver-goggles.git/': The requested URL returned error: 403\n~/Ideas/blog/site$ heroku login\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\n~/Ideas/blog/site$\n\n```\n\nI guess I'll have to login with the toolbelt afterall.  :D\n\n```\n  538  brew install heroku/brew/heroku\n  539  brew link --overwrite heroku\n  540  heroku login\n```\n\nProblem solved.  I have to use my personal credentials instead of work.  I\ninstalled a Heroku plugin to manage both, but it never seemed to work.  I just\nget my password from Lastpass and login manually.  It's often easier to do\nthings the dumb way.\n\n\n```\n  544  git add .\n  545  git status\n  546  git commit\n  547  git push heroku master\n  548  git status\n  549  fg\n  550  fg\n  551  history\n  552  history\n\n  ...\n\nremote: -----> Build failed\nremote:\nremote:  !     Outdated Yarn lockfile\n```\n\nDang it.\n\n```\n  554  yarn\n  555  git add .\n  556  git commit\n  557  git push heroku master\n  558  heroku open\n```\n\nThar she blows.\n\nWe're online.  Now let's not suck.\n","resources":{"terminal":[null]}},{"name":"02","commentary":"While driving to the store and whatnot I got a chance to think about this a\nlittle bit more.  More than anything, I want this to be _REALLY_ easy to add\nentries to.  Ideally, it could even be a terminal thing that uploads after the\nfact.  I want it to be _very_ easy to add content.\n\nI also want a way for the reader to simulate being here with me while I go\nthrough things.  There's already the idea of timestamping text.  That's cool.\nI'll also want to show lots of terminal commands and results.  Maybe I can\njust route it to a file and include it as a resource.  Eventually, we'll want\nto include screenshots and/or videos/gifs as well.\n\nEric Elliot has his whole shotgun ride along thing.  That's cool, but video\nisn't searchable... unless it's transcribed.  Whatever.  I'm no Elliot.  I can\ndo my own thing here.\n\nOne consideration is, I want the content to be adaptable.  Right now it's just\nformatted text, so it looks like those old html spec docs you run into here\nand there.  It would be nice if, as the project progressed, the content is\ndisplayed better.  Adding markdown parsing is an obvious way to do that.  I'm\nnot sure right now about images and videos.\n\n\n#idea - I may run across passwords or email coming through in the text.  There\nshould be some type of auto-redact process.\n\n\nAs an aside, it's fun to start a project, even if it seems dumb, because you\nstart to get all these other ideas as you go along.  Another point is you are\nnever quite sure what the idea is at first.  It invariably changes as you go\nalong, which is part of what I want to capture here.\n\n...\n\nI know I can redirect the terminal output using `somecommand > file.txt`, but\nhow can I do it while also reading?\n\nhttps://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file\n\n`tee` seems a good candidate, but I've never used it.  I only remember reading\nabout it in the Node docs.\n\n\n```\nman tee\n\n\nDESCRIPTION\n     The tee utility copies standard input to standard output, making a copy\n     in zero or more files.  The output is unbuffered.\n```\n\nSo something like\n\n```\nprintenv | tee output.txt\n```\n\nwill show the environment variables _and_ save the output to the log.  That's\ncool for a single command, but I don't want to pipe everything.  I'll surely\nforget.\n\nAfter searching a bit, I've seen `script` referenced a few times.  I wonder if\nit would be useful to also log the things I'm searching and reading?  I bet\nso.  We'll have to figure out a way to include web history.\n\nLet's see what `script` is all about.\n\n\n```\nman script\n\n\nDESCRIPTION\n     The script utility makes a typescript of everything printed on your terminal.  It is\n     useful for students who need a hardcopy record of an interactive session as proof of\n     an assignment, as the typescript file can be printed out later with lpr(1).\n\n```\n\nWow.  This is pretty close to perfect, except the result looks like garbage.\nThere's a log of formatting and whatnot in it.  Still...\n\n`script ./terminal.log` starts dumping all the output to `./terminal.log`\nuntil I call `exit`.  Pretty good.  Now how do we clear it up?\n\nhttps://superuser.com/questions/236930/how-to-clean-up-output-of-linux-script-command\n\n`col -bfp < terminal.log` seems pretty decent.  It fixes most of the\nformatting, but it looks like you can still see some weirdness like when I\ncompulsively clear the terminal with `cmd+k`.\n\nLet's to another quick test to see what it outputs.\n\nHere's the unprocessed version.\n\n```\nScript started on Fri Nov 17 19:08:34 2017\n\u001b[?1034hbash-3.2$ e\b\u001b[Kecho \"hello\"\r\nhello\r\nbash-3.2$ ls\r\nsite\t\tterminal.log\r\nbash-3.2$ cd site\r\nbash-3.2$ ls\r\nREADME.md\tnode_modules\tpackage.json\tpublic\t\tsrc\t\tyarn.lock\r\nbash-3.2$ man tee\r\n\u001b[?1049h\u001b[?1h\u001b=\r\r\nTEE(1)                    BSD General Commands Manual                   TEE(1)\r\n\r\n\u001b[1mNAME\u001b[0m\r\n     \u001b[1mtee\u001b[0m -- pipe fitting\r\n\r\n\u001b[1mSYNOPSIS\u001b[0m\r\n     \u001b[1mtee\u001b[0m [\u001b[1m-ai\u001b[0m] [\u001b[4mfile\u001b[24m \u001b[4m...\u001b[24m]\r\n\r\n\u001b[1mDESCRIPTION\u001b[0m\r\n     The \u001b[1mtee\u001b[0m utility copies standard input to standard output, making a copy in zero or\r\n     more files.  The output is unbuffered.\r\n\r\n     The following options are available:\r\n\r\n     \u001b[1m-a\u001b[0m      Append the output to the files rather than overwriting them.\r\n\r\n     \u001b[1m-i\u001b[0m      Ignore the SIGINT signal.\r\n\r\n     The following operands are available:\r\n\r\n     file  A pathname of an output \u001b[4mfile\u001b[24m.\r\n\r\n     The \u001b[1mtee\u001b[0m utility takes the default action for all signals, except in the event of the\r\n     \u001b[1m-i\u001b[0m option.\r\n\r\n     The \u001b[1mtee\u001b[0m utility exits 0 on success, and >0 if an error occurs.\r\n\r\n\u001b[1mSTANDARDS\u001b[0m\r\n     The \u001b[1mtee\u001b[0m function is expected to be POSIX IEEE Std 1003.2 (``POSIX.2'') compatible.\r\n\r\nBSD                              June 6, 1993                              BSD\r\n\u001b[7m(END)\u001b[27m\u001b[K\r\u001b[K\u001b[?1l\u001b>\u001b[?1049lbash-3.2$ exit\r\nexit\r\n\nScript done on Fri Nov 17 19:10:19 2017\n```\n\nAnd after running through `col -bfp < terminal.log > terminal.log.clean`...\n```\nScript started on Fri Nov 17 19:08:34 2017\n?1034hbash-3.2$ Kecho \"hello\"\nhello\nbash-3.2$ ls\nsite\t\tterminal.log\nbash-3.2$ cd site\nbash-3.2$ ls\nREADME.md\tnode_modules\tpackage.json\tpublic\t\tsrc\t\tyarn.lock\nbash-3.2$ man tee\n?1049h?1h\nTEE(1)\t\t\t  BSD General Commands Manual\t\t\tTEE(1)\n\n1mNAME0m\n     1mtee0m -- pipe fitting\n\n1mSYNOPSIS0m\n     1mtee0m [1m-ai0m] [4mfile24m 4m...24m]\n\n1mDESCRIPTION0m\n     The 1mtee0m utility copies standard input to standard output, making a copy in zero or\n     more files.  The output is unbuffered.\n\n     The following options are available:\n\n     1m-a0m\t Append the output to the files rather than overwriting them.\n\n     1m-i0m\t Ignore the SIGINT signal.\n\n     The following operands are available:\n\n     file  A pathname of an output 4mfile24m.\n\n     The 1mtee0m utility takes the default action for all signals, except in the event of the\n     1m-i0m option.\n\n     The 1mtee0m utility exits 0 on success, and >0 if an error occurs.\n\n1mSTANDARDS0m\n     The 1mtee0m function is expected to be POSIX IEEE Std 1003.2 (``POSIX.2'') compatible.\n\nBSD\t\t\t\t June 6, 1993\t\t\t\t   BSD\nK?1l?1049lbash-3.2$ exit\nexit\n\nScript done on Fri Nov 17 19:10:19 2017\n```\n\nThis is good.  It's better than nothing for sure.\n","resources":{"terminal":[null]}},{"name":"03","commentary":"It's starting to become clear that we - I like saying \"we\" a lot when talking\nabout projects.  I don't know if it's to share credit with everyone or to\nminimize the \"I\" references - need a better way to add entries.\n\n...\n\nAs I was taking out the garbage, the idea for this started to change a bit.\nThere are several things I want to show.  My thoughts, coming through in text,\nthe commands and responses in the terminal, shown in the logs we're keeping\nnow, search/web history, code at different stages, and probably screenshots\nlater.  What if this could all be syncronized somehow?  Then the reader could\ngo through the text and see links to the code, images as we refer to them, a\nsideline of the links we visited, and the commands/results in the terminal.  I\nsuppose all of this kind of _is_ a web page.  The challenge comes from\naggregating all the stuff.\n\n...\n\nI don't know how to synchronize the text to a timeline...not sure if that's\neven useful...but I can add timestamps to the files or blocks easily enough.\n\n`:r !date`\n\nFri Nov 17 20:38:38 CST 2017\n\nOne of the problems I run into constantly is distraction.  I just had to reel\nmyself back in from looking at the code used to write a Chrome plugin that\nexports history to see if I could use a similar thing to include my browsing\nhistory here.  There were several detours until I finally snapped out of it\nand realized I was off course.  Adding my search results would be cool, but\nthat's not a priority right now.  I can include links.  Evenutally, it may be\na priority, but it's a distraction at this phase.  Shake it off and focus.\n\nSo what the heck are we doing?  We're trying to figure out a way to make\nadding entries easier.\n\n... and immediately I'm distracted...\n\nI will probably forget the commands I've figured out that I want to use here,\nso I'm going to note them in the README.\n\n...\n\nOK, I've indulged.  I took a few notes in the README.  I've found that so much\nlearning happens tangentally to the task at hand.  I used to get so upset at\nall the rabbit holes when I just wanted to make a thing that did blah.  I've\nsince learned that much of the process _is_ the process of learning and\nexploring the many subtasks that stand between you and the objective.\n\nBack to the main task.  How do we make it easier to add entries?  I like the\nwhole new text file in an editor thing.  The terminal commands are being\nlogged easily enough.  Maybe we'll just make a quick script to read the\ndirectory and spit out some JSON the app can use.\n\ncurrent commit: fb4ee94, fb4ee94aba4a8a6c1dba60d3cfdc3a642bc5eafb\nhttps://github.com/reergymerej/silver-goggles/commit/fb4ee94\n\nWhoops.  I always forget the shebang for Node.  225841b\n\nhttps://stackoverflow.com/questions/24253027/node-and-shebang-help-executing-via-command-line\n\nFirst, we need to read the directory, then we need to spit out JSON with each\nof the file names.  There are many very smart ways to do this, but we don't\nneed that.  We just need a fast and easy way.  This is not a permanent or\nperformant solution.\n\nIt serves us well to stop for a second and talk this through.  I was just\nabout to refresh myself on the Node fs API before I rememembered to write what\nI was thinking.  It is very likely I would have spent the rest of the night\nfiguring out cool ways to read the files, written some npm module to do it,\ngot distracted with npm configurations, and ended up stranded with some half\nassed other chunk of code when bedtime called.\n\nDon't do that.\n\nWe've got to constantly keep ourselves in check.  So, pride be damned.  Let's\nfind the easiest way to read files already sitting in npm waiting for us.\n\n...\n\ne7fd3a5\n\nWe've now got a script that reads our public directory and spits out some JSON\nin our source directory.  We _should_ (I hope) be able to use Webpack to load\nthis resource into the app and iterate over it.  Let's see!\n\n6332a4acb1cf72cd2f6e990fd8fd020470a227a4\n\nCool beans.  CRA is nicely configured.  Webpack's doing the magic, but CRA\ntook care of configuring it for us.  Super easy.\n","resources":{"terminal":[null]}},{"name":"04","commentary":"\nFri Nov 17 21:37:40 CST 2017\n\nThis is a test to verify that new entries show up.  I also just committed the\nlog for the terminal.  Another problem has come up.  Those logs need to be\ntied to the entries.  For now, we'll just manually rename the to match the\nfilename of the entry it corresponds to.\n\n\nFri Nov 17 21:45:40 CST 2017\n\nIt's not showing the new entry in heroku.  I don't think the build step is\nhappening, so I added\n\n```\n    \"heroku-postbuild\": \"./scripts/index-entries.js\",\n```\n\nto package.json.  The movie my wife is watching is ending as is our session!\nOh no!  I'm panicking.\n\n\nFri Nov 17 21:53:25 CST 2017\n\nTo https://git.heroku.com/silver-goggles.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'https://git.heroku.com/silver-goggles.git'\n~/Ideas/blog/site$ heroku config:set NODE_MODULES_CACHE=false\nSetting NODE_MODULES_CACHE and r\n\n\nAfter several rejections, turning off the NODE_MODULES_CACHE let it through.\n","resources":{"terminal":[null]}},{"name":"05","commentary":"\nSat Nov 18 06:44:19 CST 2017\n\nThis idea is starting to crystalize.  The problem is anyway.  It is difficult\nto write about code in a useful way.  There is code everywhere and lots of\narticles about it, often accompanied by code snippets or repos, but it seems\nlike there could be a better way to do it.  Recording my screen and voice\nwould capture everything I want, mistakes and all, but it doesn't result in a\nsearchable string of text.\n\nHow can we go into \"record mode\" and capture:\n\n* code as it's written\n* terminal i/o\n* screenshots\n* commentary\n","resources":{"terminal":[null]}},{"name":"06","commentary":"\nSat Nov 18 09:58:47 CST 2017\n\nThere are two issues I'm thinking of.  The first is how to record all the\ndata.  The second is how to present it.  I'm figuring out ways to manage the\nfirst right now, but I'd like the presentation to work outside of how the data\nis collected.  I don't want to dictate how it's done or what tools should be\nused.  That's not really flexible.  So, although I'm figuring it out as I go,\nI'll just skip over the recording part for now.\n\nThe second part, the presentation, is what I want to focus on.  We've already\ngot a way to read entries and show them in the browser, but let's do something\nmore elaborate.  At a basic level, each entry in the system will contain...\n\n\n* commentary - This is the meat of the system.  This is what I'm writing now\n  and will be the primary content.\n\n* resources - Various types of additional content that enhance, and may be\n  referenced by, the commentary.\n\n** terminal logs - what I typed, what came out\n\n** code - a Git log or something that can refer to code in a particular state\n\n** images - screenshots gathered for the commentary\n\n** web history - pages visited during the commentary\n\n\nEventually, I want a way to present all of these together and somehow synced\nby time.  For starters, though, let's just put them all together.\n\nHow will we describe them to the system?\n\n```\n{\n  \"commentary\": \"blah blah blah\",\n  \"resources\": []\n}\n```\n\nI want the resources grouped by type.\n\n```\n{\n  \"commentary\": \"blah blah blah\",\n  \"resources\": {\n    \"terminal\": \"blah blah blah\",\n    \"code\": \"xxx\",\n    \"images\": [\n    ],\n    \"web-history\": [\n    ],\n  }\n}\n```\n\nSome of these resource types will be ordered lists.  For consistency, let's\nmake them all ordered lists, even if they contain only one thing.\n\n\n```\n{\n  \"commentary\": \"blah blah blah\",\n  \"resources\": {\n    \"terminal\": [\n      \"blah blah blah\"\n    ],\n    \"code\": [\n      \"xxx\"\n    ],\n    \"images\": [\n      \"xxx\"\n    ],\n    \"web-history\": [\n      \"xxx\"\n    ],\n  }\n}\n```\n\nIt is pretty easy to represent this stuff in the filesystem.  So we could have\neach entry (commentary, blog... I've got to figure out the names for things)\nreside in a directory.  That directory can optionally have subdirectories that\ndefine the attached resources.\n\nTODO: We'll have to standardize the resource names.\n\nBefore changing everything, let's rejigger the entries we spit out of our\n`index-entries.js` script and make sure the UI can understand this new\nstructure.  Then we can go back and change how the entries are read by the\nscript.\n\nref: 9a4b976641859fc2ce81abd57ba696a32348059d\n\nOK, this looks like a start.  Let's change the UI to show it the way we want.\n\n\nCrap.  I just realized we lost the names of the entries.  That's OK for now.\nThey weren't meaningful.  We should probably allow for them in the future,\nthough.  Either using dates or allowing optional titles or something.\n\n... There's no time like the present.  Let's add the name of the file for now.\n\nhttps://nodejs.org/api/path.html#path_path_basename_path_ext\n\n...\n\nThey data looks good, now let's get the entries rendering.\n\n31c1362\n\nWhoops.\n\n```\nFailed to compile\n./src/App.js\nSyntax error: Unexpected token (7:0)\n\n   5 |\n   6 | const Entry = () => (\n>  7 | )\n     | ^\n   8 |\n   9 | class App extends Component {\n  10 |   state = {\n```\n\n\nref: 36b4bc8\n\n```\nindex.js:2177 Warning: Unknown event handler property `onPress`. It will be ignored.\n    in a (at App.js:26)\n    in div (at App.js:23)\n    in App (at index.js:7)\n__stack_frame_overlay_proxy_console__ @ index.js:2177\nwebpackHotDevClient.js:136 ./src/App.js\n  Line 2:   'logo' is defined but never used                                                  no-unused-vars\n  Line 26:  Links must not point to \"#\". Use a more descriptive href or use a button instead  jsx-a11y/href-no-hash\nprintWarnings @ webpackHotDevClient.js:136\n```\n\nIt's ocurred to me that I'll probably want to share debugging stuff in the\nbrowser.  How the heck can I do that?  Will it need to be a video?\n\n\nerror:\n\n```\n    at HTMLUnknownElement.callCallback (react-dom.development.js:540)\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:579)\n    at invokeGuardedCallback (react-dom.development.js:436)\n    at renderRoot (react-dom.development.js:10386)\n```\n\nref: 498a6e9\n\n\nref: 39ee381\nOK, it's starting to look sane.\n\nNow, since we don't know how to show the resources yet, let's just go back to\nshowing the basic commentary.\n\n\nref: 1dd78d8\n\nCool.  Now we're getting somehere.  It's time to take a break.  Let's commit\nall this stuff and push it up.\n\n\nSat Nov 18 10:53:04 CST 2017\n","resources":{"terminal":["Script started on Sat Nov 18 10:12:21 2017\n?1034hbash-3.2$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mpublic/06.txtm\n\t31mterminal.logm\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nbash-3.2$ git add .\nbash-3.2$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\t32mnew file:   public/06.txtm\n\t32mnew file:   terminal.logm\n\nbash-3.2$ git commit\n?1000h?2004h?1049h?1h?2004h1;40r?12;25h?12l?25h27mm38;5;252m48;5;234mH2J?25l40;1H\"~/Ideas/blog/site/.git/COMMIT_EDITMSG\" 10L, 291C2;1H▽6n2;1H  1;1H>c1;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m\n38;5;208m48;5;235m2   m38;5;252m48;5;234m38;5;59m48;5;236m# Please enter the commit message for your changes. Lines startingm38;5;252m48;5;234m48;5;236m\t\t\t      m38;5;252m48;5;234m3;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m38;5;59m# with '#' will be ignored, and an empty message aborts the commit.m38;5;252m48;5;234m\n38;5;243m48;5;235m  2 m38;5;252m48;5;234m38;5;59m# On branch m38;5;252m48;5;234m38;5;141mmasterm38;5;252m48;5;234m\n38;5;243m48;5;235m  3 m38;5;252m48;5;234m38;5;59m# Your branch is up-to-date with 'm38;5;252m48;5;234m38;5;141morigin/masterm38;5;252m48;5;234m38;5;59m'.m38;5;252m48;5;234m\n38;5;243m48;5;235m  4 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m  5 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges to be committed:m38;5;252m48;5;234m\n38;5;243m48;5;235m  6 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  public/06.txtm38;5;252m48;5;234m\n38;5;243m48;5;235m  7 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m  8 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;208m48;5;235m1   m38;5;252m48;5;234m48;5;236m\t\t\t\t\t\t\t     12;1H~\t\t\t\t  m38;5;252m48;5;234m2;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m38;5;59m#~Please enter the commit message for your changes. Lines startingm38;5;252m48;5;234m2;71HK3;3H38;5;243m48;5;235m2\t\t\t\t\t\t\t\t\t\t\t\t15;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 16;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  17;1H~\t\t\t\t\t\t\t\t\t\t\t\t   18;1H~\t\t\t\t\t\t\t\t\t\t\t\t    19;1H~\t\t\t\t\t\t\t\t\t\t\t\t     20;1H~\t\t\t\t\t\t\t\t\t\t\t\t      21;1H~\t\t\t\t\t\t\t\t\t\t\t\t       22;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t23;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 24;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  25;1H~\t\t\t\t\t\t\t\t\t\t\t\t   26;1H~\t\t\t\t\t\t\t\t\t\t\t\t    27;1H~\t\t\t\t\t\t\t\t\t\t\t\t     28;1H~\t\t\t\t\t\t\t\t\t\t\t\t      29;1H~\t\t\t\t\t\t\t\t\t\t\t\t       30;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t31;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 32;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  33;1H~\t\t\t\t\t\t\t\t\t\t\t\t   34;1H~\t\t\t\t\t\t\t\t\t\t\t\t    35;1H~\t\t\t\t\t\t\t\t\t\t\t\t     36;1H~\t\t\t\t\t\t\t\t\t\t\t\t      37;1H~\t\t\t\t\t\t\t\t\t\t\t\t       38;1H~\t\t\t\t\t\t\t\t\t\t\t\t\tm38;5;252m48;5;234m39;1H7m38;5;59m48;5;234m.git/COMMIT_EDITMSG\t\t\t\t\t\t\t\t     2,1\t    All2;5H?12l?25h?1000l?1002h?25lm38;5;252m48;5;234m40;90Hi2;5H40;90H 2;5H40;1H38;5;186m-- INSERT --m38;5;252m48;5;234m40;13HK2;5H?12l?25h?25l40;1HK2;5H?12l?25h?25l40;90Hg2;5H?12l?25h?25l40;90H 2;5H40;90Hgg2;5H40;90H  1;5H\n  3\n  4\n  5\n  6\n  7\n  8\n  9m38;5;252m48;5;234m39;83H7m38;5;59m48;5;234m1,0-11;5H?12l?25h?25lm38;5;252m48;5;234m40;90Hi1;5H40;90H 1;5H40;1H38;5;186m-- INSERT --m38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m1  1;5H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mam38;5;252m48;5;234m39;21H7m38;5;59m48;5;234m[+]61C21;6H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mdm38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m31;7H?12l?25h?25lm38;5;252m48;5;234m40;1HK39;85H7m38;5;59m48;5;234m21;6H?12l?25h?25lm38;5;252m48;5;234m40;1HType  :qa!  and press <Enter> to abandon all changes and exit Vim1;6H?12l?25h?25l40;90H^Z1;6H40;1H\n39;49m?2004l?1l?12l?25h?1049l?1002l?2004l\n[1]+  Stopped\t\t      git commit\nbash-3.2$ fg\ngit commit\n?1002h?2004h?1049h?1h?2004h?12;25h?12l?25h27mm38;5;252m48;5;234mH2J?25l1;1H38;5;208m48;5;235m1\t m38;5;252m48;5;234m38;5;81m48;5;236madm38;5;252m48;5;234m48;5;236m\t\t\t\t\t\t\t\t\t\t\t\t m38;5;252m48;5;234m2;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m38;5;59m# Please enter the commit message for your changes. Lines startingm38;5;252m48;5;234m\n38;5;243m48;5;235m  2 m38;5;252m48;5;234m38;5;59m# with '#' will be ignored, and an empty message aborts the commit.m38;5;252m48;5;234m\n38;5;243m48;5;235m  3 m38;5;252m48;5;234m38;5;59m# On branch m38;5;252m48;5;234m38;5;141mmasterm38;5;252m48;5;234m\n38;5;243m48;5;235m  4 m38;5;252m48;5;234m38;5;59m# Your branch is up-to-date with 'm38;5;252m48;5;234m38;5;141morigin/masterm38;5;252m48;5;234m38;5;59m'.m38;5;252m48;5;234m\n38;5;243m48;5;235m  5 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m  6 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges to be committed:m38;5;252m48;5;234m\n38;5;243m48;5;235m  7 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  public/06.txtm38;5;252m48;5;234m\n38;5;243m48;5;235m  8 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m  9 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n?25l?1002l?2004l40;1HK40;1H?2004l?1l?12l?25h?1049lAborting commit due to empty commit message.\t\t     12;1H~\t\t\t\t\t\t\t\t\t\t\t\t      13;1H~\t\t\t\t\t\t\t\t\t\t\t\t       14;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t15;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 16;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  17;1H~\t\t\t\t\t\t\t\t\t\t\t\t   18;1H~\t\t\t\t\t\t\t\t\t\t\t\t    19;1H~\t\t\t\t\t\t\t\t\t\t\t\t     20;1H~\t\t\t\t\t\t\t\t\t\t\t\t      21;1H~\t\t\t\t\t\t\t\t\t\t\t\t       22;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t23;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 24;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  25;1H~\t\t\t\t\t\t\t\t\t\t\t\t   26;1H~\t\t\t\t\t\t\t\t\t\t\t\t    27;1H~\t\t\t\t\t\t\t\t\t\t\t\t     28;1H~\t\t\t\t\t\t\t\t\t\t\t\t      29;1H~\t\t\t\t\t\t\t\t\t\t\t\t       30;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t31;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 32;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  33;1H~\t\t\t\t\t\t\t\t\t\t\t\t   34;1H~\t\t\t\t\t\t\t\t\t\t\t\t    35;1H~\t\t\t\t\t\t\t\t\t\t\t\t     36;1H~\t\t\t\t\t\t\t\t\t\t\t\t      37;1H~\t\t\t\t\t\t\t\t\t\t\t\t       38;1H~\t\t\t\t\t\t\t\t\t\t\t\t\tm38;5;252m48;5;234m39;1H7m38;5;59m48;5;234m.git/COMMIT_EDITMSG [+]\t\t\t\t\t\t\t     1,2\t    All1;6H?12l?25h?25l?12l?25h?25lm38;5;252m48;5;234m40;90H:1;6H40;90HK40;1H:?2004h?12l?25hq?25l40;2HK40;2H?12l?25h?25l1;6H?12l?25h?25l40;90H:1;6H40;90HK40;1H:?2004h?12l?25hwa?25l40;3HK40;3H?12l?25h?25l40;2HK40;2H?12l?25h?25l1;6H?12l?25h?25l40;90H:1;6H40;90HK40;1H:?2004h?12l?25hqa!\nKACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCKg\nngCofCcommands.\"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCKgi\nSorry. I keep forgetting to commit inline.  Opening Vim really messes with the logging of commands.\nbash-3.2$ git commit -m Kgit commit --help\nGIT-COMMIT(1)\t\t\t\tGit Manual\t\t\t     GIT-COMMIT(1)\n\n1mNAME0m\n       git-commit - Record changes to the repository\n\n1mSYNOPSIS0m\n       4mgit24m 4mcommit24m [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n\t\t  [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n\t\t  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n\t\t  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n\t\t  [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n\t\t  [-i | -o] [-S[<keyid>]] [--] [<file>...]\n\n1mDESCRIPTION0m\n       Stores the current contents of the index in a new commit along with a log message\n       from the user describing the changes.\n\n       The content to be added can be specified in several ways:\n\n\t1. by using 4mgit24m 4madd24m to incrementally \"add\" changes to the index before using the\n\t   4mcommit24m command (Note: even modified files must be \"added\");\n\n\t2. by using 4mgit24m 4mrm24m to remove files from the working tree and the index, again\n\t   before using the 4mcommit24m command;\n\n\t3. by listing files as arguments to the 4mcommit24m command, in which case the commit\n\t   will ignore changes staged in the index, and instead record the current content\n\t   of the listed files (which must already be known to Git);\n\n\t4. by using the -a switch with the 4mcommit24m command to automatically \"add\" changes\n\t   from all known files (i.e. all files that are already listed in the index) and\n\t   to automatically \"rm\" files in the index that have been removed from the\n\t   working tree, and then perform the actual commit;\n\n\t5. by using the --interactive or --patch switches with the 4mcommit24m command to\n\t   decide one by one which files or hunks should be part of the commit, before\n\t   finalizing the operation. See the \"Interactive Mode\" section of 1mgit-add0m(1) to\n\t   learn how to operate these modes.\n\nK1;1HGIT-COMMIT(1)\t\t\t     Git Manual \t\t\t  GIT-COMMIT(1)\n2;1H\n3;1H1mNAME0m\n4;1H\t   git-commit - Record changes to the repository\n5;1H\n6;1H1mSYNOPSIS0m\n7;1H\t   4mgit24m 4mcommit24m [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n8;1H\t\t      [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n9;1H\t\t      [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n10;1H\t\t       [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n11;1H\t\t       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n12;1H\t\t       [-i | -o] [-S[<keyid>]] [--] [<file>...]\n13;1H\n14;1H1mDESCRIPTION0m\n15;1H\t    Stores the current contents of the index in a new commit along with a log message\n16;1H\t    from the user describing the changes.\n17;1H\n18;1H\t    The content to be added can be specified in several ways:\n19;1H\n20;1H\t     1. by using 4mgit24m 4madd24m to incrementally \"add\" changes to the index before using the\n21;1H\t\t4mcommit24m command (Note: even modified files must be \"added\");\n22;1H\n23;1H\t     2. by using 4mgit24m 4mrm24m to remove files from the working tree and the index, again\n24;1H\t\tbefore using the 4mcommit24m command;\n25;1H\n26;1H\t     3. by listing files as arguments to the 4mcommit24m command, in which case the commit\n27;1H\t\twill ignore changes staged in the index, and instead record the current content\n28;1H\t\tof the listed files (which must already be known to Git);\n29;1H\n30;1H\t     4. by using the -a switch with the 4mcommit24m command to automatically \"add\" changes\n31;1H\t\tfrom all known files (i.e. all files that are already listed in the index) and\n32;1H\t\tto automatically \"rm\" files in the index that have been removed from the\n33;1H\t\tworking tree, and then perform the actual commit;\n34;1H\n35;1H\t     5. by using the --interactive or --patch switches with the 4mcommit24m command to\n36;1H\t\tdecide one by one which files or hunks should be part of the commit, before\n37;1H\t\tfinalizing the operation. See the \"Interactive Mode\" section of 1mgit-add0m(1) to\n38;1H\t\tlearn how to operate these modes.\n39;1H\n40;1H1;1HGIT-COMMIT(1)\t\t\t\t Git Manual\t\t\t      GIT-COMMIT(1)\n2;1H\n3;1H1mNAME0m\n4;1H\t   git-commit - Record changes to the repository\n5;1H\n6;1H1mSYNOPSIS0m\n7;1H\t   4mgit24m 4mcommit24m [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n8;1H\t\t      [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n9;1H\t\t      [-F <file> | -m <msg>] [--reset-author] [--allow-7mempty27m]\n10;1H\t\t       [--allow-7mempty27m-message] [--no-verify] [-e] [--author=<author>]\n11;1H\t\t       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n12;1H\t\t       [-i | -o] [-S[<keyid>]] [--] [<file>...]\n13;1H\n14;1H1mDESCRIPTION0m\n15;1H\t    Stores the current contents of the index in a new commit along with a log message\n16;1H\t    from the user describing the changes.\n17;1H\n18;1H\t    The content to be added can be specified in several ways:\n19;1H\n20;1H\t     1. by using 4mgit24m 4madd24m to incrementally \"add\" changes to the index before using the\n21;1H\t\t4mcommit24m command (Note: even modified files must be \"added\");\n22;1H\n23;1H\t     2. by using 4mgit24m 4mrm24m to remove files from the working tree and the index, again\n24;1H\t\tbefore using the 4mcommit24m command;\n25;1H\n26;1H\t     3. by listing files as arguments to the 4mcommit24m command, in which case the commit\n27;1H\t\twill ignore changes staged in the index, and instead record the current content\n28;1H\t\tof the listed files (which must already be known to Git);\n29;1H\n30;1H\t     4. by using the -a switch with the 4mcommit24m command to automatically \"add\" changes\n31;1H\t\tfrom all known files (i.e. all files that are already listed in the index) and\n32;1H\t\tto automatically \"rm\" files in the index that have been removed from the\n33;1H\t\tworking tree, and then perform the actual commit;\n34;1H\n35;1H\t     5. by using the --interactive or --patch switches with the 4mcommit24m command to\n36;1H\t\tdecide one by one which files or hunks should be part of the commit, before\n37;1H\t\tfinalizing the operation. See the \"Interactive Mode\" section of 1mgit-add0m(1) to\n38;1H\t\tlearn how to operate these modes.\n39;1H\n40;1H\t    The --dry-run option can be used to obtain a summary of what is included by any of\n       the above for the next commit by giving the same set of parameters (options and\n       paths).\n\n       If you make a commit and then find a mistake immediately after that, you can\n       recover from it with 4mgit24m 4mreset24m.\n\n1mOPTIONS0m\nK?1l?1049lbash-3.2$ git commit --allow-empty\n?1000h?2004h?1049h?1h?2004h1;40r?12;25h?12l?25h27mm38;5;252m48;5;234mH2J?25l40;1H\"~/Ideas/blog/site/.git/COMMIT_EDITMSG\" 13L, 353C2;1H▽6n2;1H  1;1H>c1;1H38;5;208m48;5;235m1   m38;5;252m48;5;234m48;5;236m\t\t\t\t\t\t\t\t\t\t\t\t   m38;5;252m48;5;234m2;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m38;5;59m# Please enter the commit message for your changes. Lines startingm38;5;252m48;5;234m\n38;5;243m48;5;235m  2 m38;5;252m48;5;234m38;5;59m# with '#' will be ignored, and an empty message aborts the commit.m38;5;252m48;5;234m\n38;5;243m48;5;235m  3 m38;5;252m48;5;234m38;5;59m# On branch m38;5;252m48;5;234m38;5;141mmasterm38;5;252m48;5;234m\n38;5;243m48;5;235m  4 m38;5;252m48;5;234m38;5;59m# Your branch is up-to-date with 'm38;5;252m48;5;234m38;5;141morigin/masterm38;5;252m48;5;234m38;5;59m'.m38;5;252m48;5;234m\n38;5;243m48;5;235m  5 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m  6 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges to be committed:m38;5;252m48;5;234m\n38;5;243m48;5;235m  7 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  public/06.txtm38;5;252m48;5;234m\n38;5;243m48;5;235m  8 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m  9 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m 10 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges not staged for commit:m38;5;252m48;5;234m\n38;5;243m48;5;235m 11 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m 12 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n?25l?1002l?2004l40;1HK40;1H?2004l?1l?12l?25h?1049lAborting commit due to empty commit message.\t\t     15;1H~\t\t\t\t\t\t\t\t\t\t\t\t      16;1H~\t\t\t\t\t\t\t\t\t\t\t\t       17;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t18;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 19;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  20;1H~\t\t\t\t\t\t\t\t\t\t\t\t   21;1H~\t\t\t\t\t\t\t\t\t\t\t\t    22;1H~\t\t\t\t\t\t\t\t\t\t\t\t     23;1H~\t\t\t\t\t\t\t\t\t\t\t\t      24;1H~\t\t\t\t\t\t\t\t\t\t\t\t       25;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t26;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 27;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  28;1H~\t\t\t\t\t\t\t\t\t\t\t\t   29;1H~\t\t\t\t\t\t\t\t\t\t\t\t    30;1H~\t\t\t\t\t\t\t\t\t\t\t\t     31;1H~\t\t\t\t\t\t\t\t\t\t\t\t      32;1H~\t\t\t\t\t\t\t\t\t\t\t\t       33;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t34;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 35;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  36;1H~\t\t\t\t\t\t\t\t\t\t\t\t   37;1H~\t\t\t\t\t\t\t\t\t\t\t\t    38;1H~\t\t\t\t\t\t\t\t\t\t\t\t     m38;5;252m48;5;234m39;1H7m38;5;59m48;5;234m.git/COMMIT_EDITMSG\t\t\t\t\t\t\t\t  1,0-1 \t All1;5H?12l?25h?1000l?1002h?25lm38;5;252m48;5;234m40;90H:1;5H40;1HK40;1H:?2004h?12l?25h?25l40;1HK1;5H?12l?25h?25l40;90H:1;5H40;90HK40;1H:?2004h?12l?25hq!\nbash-3.2$ git commit -m '' --allow-empty\nAborting commit due to empty commit message.\nbash-3.2$ git commit -m '' --allow-empty\nbash-3.2$ git commit --Khelp\nGIT-COMMIT(1)\t\t\t\tGit Manual\t\t\t     GIT-COMMIT(1)\n\n1mNAME0m\n       git-commit - Record changes to the repository\n\n1mSYNOPSIS0m\n       4mgit24m 4mcommit24m [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n\t\t  [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n\t\t  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n\t\t  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n\t\t  [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n\t\t  [-i | -o] [-S[<keyid>]] [--] [<file>...]\n\n1mDESCRIPTION0m\n       Stores the current contents of the index in a new commit along with a log message\n       from the user describing the changes.\n\n       The content to be added can be specified in several ways:\n\n\t1. by using 4mgit24m 4madd24m to incrementally \"add\" changes to the index before using the\n\t   4mcommit24m command (Note: even modified files must be \"added\");\n\n\t2. by using 4mgit24m 4mrm24m to remove files from the working tree and the index, again\n\t   before using the 4mcommit24m command;\n\n\t3. by listing files as arguments to the 4mcommit24m command, in which case the commit\n\t   will ignore changes staged in the index, and instead record the current content\n\t   of the listed files (which must already be known to Git);\n\n\t4. by using the -a switch with the 4mcommit24m command to automatically \"add\" changes\n\t   from all known files (i.e. all files that are already listed in the index) and\n\t   to automatically \"rm\" files in the index that have been removed from the\n\t   working tree, and then perform the actual commit;\n\n\t5. by using the --interactive or --patch switches with the 4mcommit24m command to\n\t   decide one by one which files or hunks should be part of the commit, before\n\t   finalizing the operation. See the \"Interactive Mode\" section of 1mgit-add0m(1) to\n\t   learn how to operate these modes.\n\nK1;1HGIT-COMMIT(1)\t\t\t     Git Manual \t\t\t  GIT-COMMIT(1)\n2;1H\n3;1H1mNAME0m\n4;1H\t   git-commit - Record changes to the repository\n5;1H\n6;1H1mSYNOPSIS0m\n7;1H\t   4mgit24m 4mcommit24m [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n8;1H\t\t      [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n9;1H\t\t      [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n10;1H\t\t       [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n11;1H\t\t       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n12;1H\t\t       [-i | -o] [-S[<keyid>]] [--] [<file>...]\n13;1H\n14;1H1mDESCRIPTION0m\n15;1H\t    Stores the current contents of the index in a new commit along with a log message\n16;1H\t    from the user describing the changes.\n17;1H\n18;1H\t    The content to be added can be specified in several ways:\n19;1H\n20;1H\t     1. by using 4mgit24m 4madd24m to incrementally \"add\" changes to the index before using the\n21;1H\t\t4mcommit24m command (Note: even modified files must be \"added\");\n22;1H\n23;1H\t     2. by using 4mgit24m 4mrm24m to remove files from the working tree and the index, again\n24;1H\t\tbefore using the 4mcommit24m command;\n25;1H\n26;1H\t     3. by listing files as arguments to the 4mcommit24m command, in which case the commit\n27;1H\t\twill ignore changes staged in the index, and instead record the current content\n28;1H\t\tof the listed files (which must already be known to Git);\n29;1H\n30;1H\t     4. by using the -a switch with the 4mcommit24m command to automatically \"add\" changes\n31;1H\t\tfrom all known files (i.e. all files that are already listed in the index) and\n32;1H\t\tto automatically \"rm\" files in the index that have been removed from the\n33;1H\t\tworking tree, and then perform the actual commit;\n34;1H\n35;1H\t     5. by using the --interactive or --patch switches with the 4mcommit24m command to\n36;1H\t\tdecide one by one which files or hunks should be part of the commit, before\n37;1H\t\tfinalizing the operation. See the \"Interactive Mode\" section of 1mgit-add0m(1) to\n38;1H\t\tlearn how to operate these modes.\n39;1H\n40;1H1;1HGIT-COMMIT(1)\t\t\t\t Git Manual\t\t\t      GIT-COMMIT(1)\n2;1H\n3;1H1mNAME0m\n4;1H\t   git-commit - Record changes to the repository\n5;1H\n6;1H1mSYNOPSIS0m\n7;1H\t   4mgit24m 4mcommit24m [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n8;1H\t\t      [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n9;1H\t\t      [-F <file> | -m <msg>] [--reset-author] [--allow-7mempty27m]\n10;1H\t\t       [--allow-7mempty27m-message] [--no-verify] [-e] [--author=<author>]\n11;1H\t\t       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n12;1H\t\t       [-i | -o] [-S[<keyid>]] [--] [<file>...]\n13;1H\n14;1H1mDESCRIPTION0m\n15;1H\t    Stores the current contents of the index in a new commit along with a log message\n16;1H\t    from the user describing the changes.\n17;1H\n18;1H\t    The content to be added can be specified in several ways:\n19;1H\n20;1H\t     1. by using 4mgit24m 4madd24m to incrementally \"add\" changes to the index before using the\n21;1H\t\t4mcommit24m command (Note: even modified files must be \"added\");\n22;1H\n23;1H\t     2. by using 4mgit24m 4mrm24m to remove files from the working tree and the index, again\n24;1H\t\tbefore using the 4mcommit24m command;\n25;1H\n26;1H\t     3. by listing files as arguments to the 4mcommit24m command, in which case the commit\n27;1H\t\twill ignore changes staged in the index, and instead record the current content\n28;1H\t\tof the listed files (which must already be known to Git);\n29;1H\n30;1H\t     4. by using the -a switch with the 4mcommit24m command to automatically \"add\" changes\n31;1H\t\tfrom all known files (i.e. all files that are already listed in the index) and\n32;1H\t\tto automatically \"rm\" files in the index that have been removed from the\n33;1H\t\tworking tree, and then perform the actual commit;\n34;1H\n35;1H\t     5. by using the --interactive or --patch switches with the 4mcommit24m command to\n36;1H\t\tdecide one by one which files or hunks should be part of the commit, before\n37;1H\t\tfinalizing the operation. See the \"Interactive Mode\" section of 1mgit-add0m(1) to\n38;1H\t\tlearn how to operate these modes.\n39;1H\n40;1H\t    The --dry-run option can be used to obtain a summary of what is included by any of\n       the above for the next commit by giving the same set of parameters (options and\n       paths).\n\n       If you make a commit and then find a mistake immediately after that, you can\n       recover from it with 4mgit24m 4mreset24m.\n\n1mOPTIONS0m\nK/\t-a, --all\nK...skipping...\n       --allow-7mempty27m\n\t   Usually recording a commit that has the exact same tree as its sole parent\n\t   commit is a mistake, and the command prevents you from making such a commit.\n\t   This option bypasses the safety, and is primarily for use by foreign SCM\n\t   interface scripts.\n\n       --allow-7mempty27m-message\n\t   Like --allow-7mempty27m this command is primarily for use by foreign SCM interface\n\t   scripts. It allows you to create a commit with an 7mempty27m commit message without\n\t   using plumbing commands like 1mgit-commit-tree0m(1).\n\n       --cleanup=<mode>\n\t   This option determines how the supplied commit message should be cleaned up\n\t   before committing. The 4m<mode>24m can be strip, whitespace, verbatim, scissors or\n\t   default.\n\n\t   strip\n\t       Strip leading and trailing 7mempty27m lines, trailing whitespace, commentary and\n\t       collapse consecutive 7mempty27m lines.\n\n\t   whitespace\n\t       Same as strip except #commentary is not removed.\n\n\t   verbatim\n\t       Do not change the message at all.\n\n\t   scissors\n\t       Same as whitespace, except that everything from (and including) the line \"#\n\t       ------------------------ >8 ------------------------\" is truncated if the\n\t       message is to be edited. \"#\" can be customized with core.commentChar.\n\n\t   default\n\t       Same as strip if the message is to be edited. Otherwise whitespace.\n\n\t   The default can be changed by the 4mcommit.cleanup24m configuration variable (see\n\t   1mgit-config0m(1)).\n\n       -e, --edit\n\t   The message taken from file with -F, command line with -m, and from commit\nK?1l?1049lbash-3.2$ git commit --allow-empty-message\n?1000h?2004h?1049h?1h?2004h1;40r?12;25h?12l?25h27mm38;5;252m48;5;234mH2J?25l40;1H\"~/Ideas/blog/site/.git/COMMIT_EDITMSG\" 13L, 353C2;1H▽6n2;1H  1;1H>c1;1H38;5;208m48;5;235m1   m38;5;252m48;5;234m48;5;236m\t\t\t\t\t\t\t\t\t\t\t\t   m38;5;252m48;5;234m2;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m38;5;59m# Please enter the commit message for your changes. Lines startingm38;5;252m48;5;234m\n38;5;243m48;5;235m  2 m38;5;252m48;5;234m38;5;59m# with '#' will be ignored, and an empty message aborts the commit.m38;5;252m48;5;234m\n38;5;243m48;5;235m  3 m38;5;252m48;5;234m38;5;59m# On branch m38;5;252m48;5;234m38;5;141mmasterm38;5;252m48;5;234m\n38;5;243m48;5;235m  4 m38;5;252m48;5;234m38;5;59m# Your branch is up-to-date with 'm38;5;252m48;5;234m38;5;141morigin/masterm38;5;252m48;5;234m38;5;59m'.m38;5;252m48;5;234m\n38;5;243m48;5;235m  5 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m  6 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges to be committed:m38;5;252m48;5;234m\n38;5;243m48;5;235m  7 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  public/06.txtm38;5;252m48;5;234m\n38;5;243m48;5;235m  8 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mnew filem38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m  9 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m 10 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges not staged for commit:m38;5;252m48;5;234m\n38;5;243m48;5;235m 11 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m 12 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n?25l?1002l?2004l40;1HK40;1H?2004l?1l?12l?25h?1049l[master a8d4115]\t\t\t\t\t     15;1H~\t\t\t\t\t\t\t\t\t\t\t\t      16;1H~\t\t\t\t\t\t\t\t\t\t\t\t       17;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t18;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 19;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  20;1H~\t\t\t\t\t\t\t\t\t\t\t\t   21;1H~\t\t\t\t\t\t\t\t\t\t\t\t    22;1H~\t\t\t\t\t\t\t\t\t\t\t\t     23;1H~\t\t\t\t\t\t\t\t\t\t\t\t      24;1H~\t\t\t\t\t\t\t\t\t\t\t\t       25;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t26;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 27;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  28;1H~\t\t\t\t\t\t\t\t\t\t\t\t   29;1H~\t\t\t\t\t\t\t\t\t\t\t\t    30;1H~\t\t\t\t\t\t\t\t\t\t\t\t     31;1H~\t\t\t\t\t\t\t\t\t\t\t\t      32;1H~\t\t\t\t\t\t\t\t\t\t\t\t       33;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t34;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 35;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  36;1H~\t\t\t\t\t\t\t\t\t\t\t\t   37;1H~\t\t\t\t\t\t\t\t\t\t\t\t    38;1H~\t\t\t\t\t\t\t\t\t\t\t\t     m38;5;252m48;5;234m39;1H7m38;5;59m48;5;234m.git/COMMIT_EDITMSG\t\t\t\t\t\t\t\t  1,0-1 \t All1;5H?12l?25h?1000l?1002h?25lm38;5;252m48;5;234m40;90H:1;5H40;1HK40;1H:?2004h?12l?25hq!\n 2 files changed, 82 insertions(+)\n create mode 100644 public/06.txt\n create mode 100644 terminal.log\nbash-3.2$ git push\nCounting objects: 5, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (5/5), 1.27 KiB | 0 bytes/s, done.\nTotal 5 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.K\nTo git@github.com:reergymerej/silver-goggles.git\n   6f9037f..a8d4115  master -> master\nbash-3.2$ .Kgit add . && git commit --Km 'start Kaltering entry indexing script'\n[master 1537923] start altering entry indexing script\n 3 files changed, 416 insertions(+), 1 deletion(-)\nbash-3.2$ ./Kscripts/index-entries.js\n01.txt\n02.txt\n03.txt\n04.txt\n05.txt\n06.txt\n[\"01.txt\",\"02.txt\",\"03.txt\",\"04.txt\",\"05.txt\",\"06.txt\"]\nCCCCCCCCCCgitcaddt./&&dgitecommit.-m 'start altering entry indexing scriptK-allow-empty-eKmessage\n?1000h?2004h?1049h?1h?2004h1;40r?12;25h?12l?25h27mm38;5;252m48;5;234mH2J?25l40;1H\"~/Ideas/blog/site/.git/COMMIT_EDITMSG\" 11L, 358C2;1H▽6n2;1H  1;1H>c1;1H38;5;208m48;5;235m1   m38;5;252m48;5;234m48;5;236m\t\t\t\t\t\t\t\t\t\t\t\t   m38;5;252m48;5;234m2;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m38;5;59m# Please enter the commit message for your changes. Lines startingm38;5;252m48;5;234m\n38;5;243m48;5;235m  2 m38;5;252m48;5;234m38;5;59m# with '#' will be ignored, and an empty message aborts the commit.m38;5;252m48;5;234m\n38;5;243m48;5;235m  3 m38;5;252m48;5;234m38;5;59m# On branch m38;5;252m48;5;234m38;5;141mmasterm38;5;252m48;5;234m\n38;5;243m48;5;235m  4 m38;5;252m48;5;234m38;5;59m# Your branch is ahead of 'm38;5;252m48;5;234m38;5;141morigin/masterm38;5;252m48;5;234m38;5;59m' by 1 commit.m38;5;252m48;5;234m\n38;5;243m48;5;235m  5 m38;5;252m48;5;234m38;5;59m#   (use \"git push\" to publish your local commits)m38;5;252m48;5;234m\n38;5;243m48;5;235m  6 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m  7 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges to be committed:m38;5;252m48;5;234m\n38;5;243m48;5;235m  8 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  scripts/index-entries.jsm38;5;252m48;5;234m\n38;5;243m48;5;235m  9 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m 10 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n?25l?1002l?2004l40;1HK40;1H?2004l?1l?12l?25h?1049l[master 5062039]\t\t\t\t\t     13;1H~\t\t\t\t\t\t\t\t\t\t\t\t      14;1H~\t\t\t\t\t\t\t\t\t\t\t\t       15;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t16;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 17;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  18;1H~\t\t\t\t\t\t\t\t\t\t\t\t   19;1H~\t\t\t\t\t\t\t\t\t\t\t\t    20;1H~\t\t\t\t\t\t\t\t\t\t\t\t     21;1H~\t\t\t\t\t\t\t\t\t\t\t\t      22;1H~\t\t\t\t\t\t\t\t\t\t\t\t       23;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t24;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 25;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  26;1H~\t\t\t\t\t\t\t\t\t\t\t\t   27;1H~\t\t\t\t\t\t\t\t\t\t\t\t    28;1H~\t\t\t\t\t\t\t\t\t\t\t\t     29;1H~\t\t\t\t\t\t\t\t\t\t\t\t      30;1H~\t\t\t\t\t\t\t\t\t\t\t\t       31;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t32;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 33;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  34;1H~\t\t\t\t\t\t\t\t\t\t\t\t   35;1H~\t\t\t\t\t\t\t\t\t\t\t\t    36;1H~\t\t\t\t\t\t\t\t\t\t\t\t     37;1H~\t\t\t\t\t\t\t\t\t\t\t\t      38;1H~\t\t\t\t\t\t\t\t\t\t\t\t       m38;5;252m48;5;234m39;1H7m38;5;59m48;5;234m.git/COMMIT_EDITMSG\t\t\t\t\t\t\t\t    1,0-1\t   All1;5H?12l?25h?1000l?1002h?25lm38;5;252m48;5;234m40;90H:1;5H40;1HK40;1H:?2004h?12l?25hq\n 2 files changed, 17 insertions(+), 3 deletions(-)\nCCCCCCCCCC19P./scripts/index-entries.jsow-empty-message\n[{\"commentary\":\"01.txt\",\"resources\":{}},{\"commentary\":\"02.txt\",\"resources\":{}},{\"commentary\":\"03.txt\",\"resources\":{}},{\"commentary\":\"04.txt\",\"resources\":{}},{\"commentary\":\"05.txt\",\"resources\":{}},{\"commentary\":\"06.txt\",\"resources\":{}}]\nbash-3.2$ git add . && git commit -m 'Kread file contents instead of name'\n[master 9a4b976] read file contents instead of name\n 2 files changed, 18 insertions(+), 3 deletions(-)\nbash-3.2$ ./scripts/index-entries.js\n[{\"commentary\":\"So I was thinking I'd like to do something meaningful.\tWhat in the world\\ncould that be?  Helping people seems to universally work as a way to find\\nmeaning.\tWhat can I help with?  \\\"Here's a website.  It will help you!\\\"  I\\ndon't know.\\n\\nMaybe starting a blog or some type of resource to help people learn to code\\nwould be cool.\tThere is no shortage of blogs or tech articles out there,\\nthough.  What could I do differently?\\n\\nOne thing you don't see is complete honesty.  It may be unprofessional and\\nmaybe severely undermine confidence, but what if someone showed you their\\nmistakes?  Not as a gag reel or some sort of ironic thing, but more as a\\ncandid view.  That may make things more approachable.  Mistakes are valuable\\nbecause you get to learn from them, so sharing your mistakes seems like it\\nwould increase the value.\\n\\nSo, the idea is not to be an unpolished slacker, but to provide complete\\nopenness along with instruction.\tTo start with, a blog probably shouldn't be\\na finished, beautiful product.  It's basically an open journal, right?\\nPunctuation and grammar are fine, but it should probably be pretty rough and\\nraw.\\n\\nSo here, what the heck.  Let's start with this.  I'm not sure where I'm going,\\nwhat the point is, or how it will turn out, but this is my project.\tFrom\\ninception to completion as transparent as possible, I'm going to document it.\\n\\n...\\n\\nIn the interest of _somewhat_ tolerable writing, I need to pick an audience,\\nthough.  I'm going to imagine...\\n\\nWell, I trailed off imagining myself at different points in my life when I was\\nlearing to program.\\n\\nScrew it.  I'm just going to talk to the terminal.  If I start talking to \\\"the\\naudience\\\" the tone will change and I'll start worrying too much about _how_\\nI'm saying things rather than _what_ I'm saying.\\n\\n...\\n\\nOK, so what are the goals?\\n\\n1.  Transparency - I want mistakes to be visible, ignorance to be highlighted,\\nand the documentation to be off the cuff.  This is to show that even\\nsuccessful dudes who have been writing and studying code for many years and\\nare pretty good at what they do are just regular guys full of doubt,\\nignorance, and potential mistakes.\\n\\n2.  Create a Blog - The blog should be super easy to update (to encourage it\\nhappen regularly), provide lots of detail, and have very \\\"raw\\\" content.\\n\\nI would like to get something up ASAP, so that it doesn't all appear at once\\nat the end of the project.  Honestly, most (practically all) of my projects\\ndie the day after I start them.  I get really pumped, start working, get\\nsidetracked with infrastructure or find another cooler idea along the way...\\nThere's always something, so the sooner I can get this \\\"launched\\\" the better\\nchange it has of surviving past next week.\\n\\n\\nWhat's the absolute fastest way to get an app out there into the world?  This\\nis not a paid promotion, but I bet I can get this into the world in the next\\n10 minutes with CRA and Heroku.\\n\\nHere's the plan.\\n\\n1.  create the app\\n2.\tpost this as static content\\n3.  deploy as a new free app in Heroku\\n\\n\\n(Side note: It's going to become a pain in the ass documenting all of this\\nstuff.  Maybe I could just log the terminal history or something.)\\n\\n```\\ncreate-react-app site\\n```\\n\\nI may elaborate on all this stuff later, but maybe not.  There are plenty of\\nsources out there already.\\n\\nThis file is 01.txt in the dir above the `site` dir I just created.\\n\\n```\\n/Users/jeremygreer/Ideas/blog/\\n▼ site/\\n  ► public/\\n  ► src/\\n\t  package.json\\n    README.md\\n    yarn.lock\\n\t01.txt\\n```\\n\\nI'm sure I'll have resources _other_ than the site, but now I need to move the\\ntext into the site.  What if I just symlink it and keep it separate for now?\\nI don't know what that may do.  Let's just keep it simple and move.\\n\\n```\\n</jeremygreer/Ideas/blog/site/\\n▼ public/\\n\t01.txt\\n    favicon.ico\\n    index.html\\n    manifest.json\\n► src/\\n  package.json\\n  README.md\\n  yarn.lock\\n```\\n\\nOK, simple.  For the first pass, we'll just have links from the main site to\\nthe resource.  That's kind of cool.\tI like the resources be just plain old\\ntext.  That makes them portable (they should probably be markdown though).\\n\\n...\\n\\nI just added a link from the boilerplate to the text file.  That works for\\nnow.  It's ocurred to me that I will be referencing code a _lot_ in this - and\\nin particular states.\tI'll need a good way to document that.\tLet's just rely\\non Git for now.\\n\\nThere.  Check 31b6c302d2ee643ef22e943a6b9a38dc891f1c0b to see where things\\nstand for now.\tI'll have to make this project public and actually push it to\\nGithub.\tMaybe there's a good convention for referencing SHAs in a blog.  I\\ndon't want to keep making Gists ever 12 seconds.\\n\\n...\\n\\nI just created the repo with the suggested name.  I haven't done that in a\\nwhile.  https://github.com/reergymerej/silver-goggles\\n\\nNow it's very public.  I hope work doesn't watch my commits in Github if I get\\ninspired in the middle of the day to do a little writing.\\n\\n...\\n\\nI'm trying to login to Heroku with the toolbelt, but I'm seeing some weird\\nerrors.\\n\\n```\\n~/Ideas/blog/site$ heroku login\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\t fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\t  fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n```\\n\\nI wonder if this is because of the High Sierra upgrade.  It smells like it, so\\nI opened XCode because it needs to install dependencies and get my signature\\non EULA and crap sometimes and I heard from work there may be something.  It\\ncouldn't hurt.\\n\\nnope\\n\\nDoes it work from other directories where I used to use it?\\n\\nnope\\n\\nCan I reinstall it?\tI think I used brew, but I'll just check Heroku.\\n\\n...wait...\\n\\nI've got down lots of rabbit holes.  This always happens.  What am I trying to\\ndo?  Create an app in Heroku and get the URL.  I can do that through the GUI\\neasily and figure out this crap later.\\n\\n...and done 1 minute later.\\n\\nI wonder if there's a way to timestamp each line of the text document.  That\\nwould be cool to show _how long_ it takes to write the text.\\n\\n...\\n\\nDang it.\\n\\n```\\n~/Ideas/blog/site$ git remote -v\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (fetch)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (push)\\n~/Ideas/blog/site$ git remote add heroku https://git.heroku.com/silver-goggles.git\\n~/Ideas/blog/site$ git remote -v\\nheroku\\thttps://git.heroku.com/silver-goggles.git (fetch)\\nheroku\\thttps://git.heroku.com/silver-goggles.git (push)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (fetch)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (push)\\n~/Ideas/blog/site$ git status\\nOn branch master\\nYour branch is up-to-date with 'origin/master'.\\nChanges to be committed:\\n  (use \\\"git reset HEAD <file>...\\\" to unstage)\\n\\n\\tmodified:   public/01.txt\\n\\n~/Ideas/blog/site$ fg\\nnvim .\\n\\n[1]+  Stopped\t\t   nvim .\\n~/Ideas/blog/site$ git commit -m 'setup heroku remote'\\n[master 5582472] setup heroku remote\\n 1 file changed, 54 insertions(+)\\n~/Ideas/blog/site$ git push heroku master\\nremote: !\\tYour account jeremy.greer@XXXXXXXXXXXXXXXX.com does not have access to silver-goggles.\\nfatal: unable to access 'https://git.heroku.com/silver-goggles.git/': The requested URL returned error: 403\\n~/Ideas/blog/site$ heroku login\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n~/Ideas/blog/site$\\n\\n```\\n\\nI guess I'll have to login with the toolbelt afterall.  :D\\n\\n```\\n  538  brew install heroku/brew/heroku\\n  539  brew link --overwrite heroku\\n  540  heroku login\\n```\\n\\nProblem solved.  I have to use my personal credentials instead of work.  I\\ninstalled a Heroku plugin to manage both, but it never seemed to work.  I just\\nget my password from Lastpass and login manually.  It's often easier to do\\nthings the dumb way.\\n\\n\\n```\\n  544  git add .\\n  545  git status\\n  546  git commit\\n  547  git push heroku master\\n  548\tgit status\\n  549  fg\\n  550  fg\\n  551  history\\n  552  history\\n\\n  ...\\n\\nremote: -----> Build failed\\nremote:\\nremote:  !\t  Outdated Yarn lockfile\\n```\\n\\nDang it.\\n\\n```\\n  554  yarn\\n  555  git add .\\n  556\tgit commit\\n  557  git push heroku master\\n  558  heroku open\\n```\\n\\nThar she blows.\\n\\nWe're online.\tNow let's not suck.\\n\",\"resources\":{}},{\"commentary\":\"While driving to the store and whatnot I got a chance to think about this a\\nlittle bit more.  More than anything, I want this to be _REALLY_ easy to add\\nentries to.  Ideally, it could even be a terminal thing that uploads after the\\nfact.\tI want it to be _very_ easy to add content.\\n\\nI also want a way for the reader to simulate being here with me while I go\\nthrough things.  There's already the idea of timestamping text.  That's cool.\\nI'll also want to show lots of terminal commands and results.  Maybe I can\\njust route it to a file and include it as a resource.  Eventually, we'll want\\nto include screenshots and/or videos/gifs as well.\\n\\nEric Elliot has his whole shotgun ride along thing.\tThat's cool, but video\\nisn't searchable... unless it's transcribed.  Whatever.  I'm no Elliot.  I can\\ndo my own thing here.\\n\\nOne consideration is, I want the content to be adaptable.  Right now it's just\\nformatted text, so it looks like those old html spec docs you run into here\\nand there.  It would be nice if, as the project progressed, the content is\\ndisplayed better.  Adding markdown parsing is an obvious way to do that.  I'm\\nnot sure right now about images and videos.\\n\\n\\n#idea - I may run across passwords or email coming through in the text.  There\\nshould be some type of auto-redact process.\\n\\n\\nAs an aside, it's fun to start a project, even if it seems dumb, because you\\nstart to get all these other ideas as you go along.  Another point is you are\\nnever quite sure what the idea is at first.  It invariably changes as you go\\nalong, which is part of what I want to capture here.\\n\\n...\\n\\nI know I can redirect the terminal output using `somecommand > file.txt`, but\\nhow can I do it while also reading?\\n\\nhttps://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file\\n\\n`tee` seems a good candidate, but I've never used it.  I only remember reading\\nabout it in the Node docs.\\n\\n\\n```\\nman tee\\n\\n\\nDESCRIPTION\\n\t The tee utility copies standard input to standard output, making a copy\\n     in zero or more files.  The output is unbuffered.\\n```\\n\\nSo something like\\n\\n```\\nprintenv | tee output.txt\\n```\\n\\nwill show the environment variables _and_ save the output to the log.  That's\\ncool for a single command, but I don't want to pipe everything.  I'll surely\\nforget.\\n\\nAfter searching a bit, I've seen `script` referenced a few times.\tI wonder if\\nit would be useful to also log the things I'm searching and reading?  I bet\\nso.  We'll have to figure out a way to include web history.\\n\\nLet's see what `script` is all about.\\n\\n\\n```\\nman script\\n\\n\\nDESCRIPTION\\n\t   The script utility makes a typescript of everything printed on your terminal.  It is\\n     useful for students who need a hardcopy record of an interactive session as proof of\\n\t an assignment, as the typescript file can be printed out later with lpr(1).\\n\\n```\\n\\nWow.  This is pretty close to perfect, except the result looks like garbage.\\nThere's a log of formatting and whatnot in it.  Still...\\n\\n`script ./terminal.log` starts dumping all the output to `./terminal.log`\\nuntil I call `exit`.  Pretty good.\tNow how do we clear it up?\\n\\nhttps://superuser.com/questions/236930/how-to-clean-up-output-of-linux-script-command\\n\\n`col -bfp < terminal.log` seems pretty decent.  It fixes most of the\\nformatting, but it looks like you can still see some weirdness like when I\\ncompulsively clear the terminal with `cmd+k`.\\n\\nLet's to another quick test to see what it outputs.\\n\\nHere's the unprocessed version.\\n\\n```\\nScript started on Fri Nov 17 19:08:34 2017\\n\\u001b[?1034hbash-3.2$ e\\b\\u001b[Kecho \\\"hello\\\"\\r\\nhello\\r\\nbash-3.2$ ls\\r\\nsite\\t\\tterminal.log\\r\\nbash-3.2$ cd site\\r\\nbash-3.2$ ls\\r\\nREADME.md\\tnode_modules\\tpackage.json\\tpublic\\t\\tsrc\\t\\tyarn.lock\\r\\nbash-3.2$ man tee\\r\\n\\u001b[?1049h\\u001b[?1h\\u001b=\\r\\r\\nTEE(1)\t\t       BSD General Commands Manual\t\t     TEE(1)\\r\\n\\r\\n\\u001b[1mNAME\\u001b[0m\\r\\n\t  \\u001b[1mtee\\u001b[0m -- pipe fitting\\r\\n\\r\\n\\u001b[1mSYNOPSIS\\u001b[0m\\r\\n\t  \\u001b[1mtee\\u001b[0m [\\u001b[1m-ai\\u001b[0m] [\\u001b[4mfile\\u001b[24m \\u001b[4m...\\u001b[24m]\\r\\n\\r\\n\\u001b[1mDESCRIPTION\\u001b[0m\\r\\n     The \\u001b[1mtee\\u001b[0m utility copies standard input to standard output, making a copy in zero or\\r\\n\t   more files.\tThe output is unbuffered.\\r\\n\\r\\n     The following options are available:\\r\\n\\r\\n     \\u001b[1m-a\\u001b[0m\t Append the output to the files rather than overwriting them.\\r\\n\\r\\n\t  \\u001b[1m-i\\u001b[0m\t    Ignore the SIGINT signal.\\r\\n\\r\\n\t  The following operands are available:\\r\\n\\r\\n     file  A pathname of an output \\u001b[4mfile\\u001b[24m.\\r\\n\\r\\n     The \\u001b[1mtee\\u001b[0m utility takes the default action for all signals, except in the event of the\\r\\n     \\u001b[1m-i\\u001b[0m option.\\r\\n\\r\\n     The \\u001b[1mtee\\u001b[0m utility exits 0 on success, and >0 if an error occurs.\\r\\n\\r\\n\\u001b[1mSTANDARDS\\u001b[0m\\r\\n\t   The \\u001b[1mtee\\u001b[0m function is expected to be POSIX IEEE Std 1003.2 (``POSIX.2'') compatible.\\r\\n\\r\\nBSD\t\t\t\tJune 6, 1993\t\t\t\t  BSD\\r\\n\\u001b[7m(END)\\u001b[27m\\u001b[K\\r\\u001b[K\\u001b[?1l\\u001b>\\u001b[?1049lbash-3.2$ exit\\r\\nexit\\r\\n\\nScript done on Fri Nov 17 19:10:19 2017\\n```\\n\\nAnd after running through `col -bfp < terminal.log > terminal.log.clean`...\\n```\\nScript started on Fri Nov 17 19:08:34 2017\\n?1034hbash-3.2$ Kecho \\\"hello\\\"\\nhello\\nbash-3.2$ ls\\nsite\\t\\tterminal.log\\nbash-3.2$ cd site\\nbash-3.2$ ls\\nREADME.md\\tnode_modules\\tpackage.json\\tpublic\\t\\tsrc\\t\\tyarn.lock\\nbash-3.2$ man tee\\n?1049h?1h\\nTEE(1)\\t\\t\\t  BSD General Commands Manual\\t\\t\\tTEE(1)\\n\\n1mNAME0m\\n\t 1mtee0m -- pipe fitting\\n\\n1mSYNOPSIS0m\\n     1mtee0m [1m-ai0m] [4mfile24m 4m...24m]\\n\\n1mDESCRIPTION0m\\n     The 1mtee0m utility copies standard input to standard output, making a copy in zero or\\n     more files.  The output is unbuffered.\\n\\n\t   The following options are available:\\n\\n\t1m-a0m\\t Append the output to the files rather than overwriting them.\\n\\n     1m-i0m\\t Ignore the SIGINT signal.\\n\\n\t The following operands are available:\\n\\n     file  A pathname of an output 4mfile24m.\\n\\n\tThe 1mtee0m utility takes the default action for all signals, except in the event of the\\n     1m-i0m option.\\n\\n     The 1mtee0m utility exits 0 on success, and >0 if an error occurs.\\n\\n1mSTANDARDS0m\\n\tThe 1mtee0m function is expected to be POSIX IEEE Std 1003.2 (``POSIX.2'') compatible.\\n\\nBSD\\t\\t\\t\\t June 6, 1993\\t\\t\\t\\t   BSD\\nK?1l?1049lbash-3.2$ exit\\nexit\\n\\nScript done on Fri Nov 17 19:10:19 2017\\n```\\n\\nThis is good.  It's better than nothing for sure.\\n\",\"resources\":{}},{\"commentary\":\"It's starting to become clear that we - I like saying \\\"we\\\" a lot when talking\\nabout projects.  I don't know if it's to share credit with everyone or to\\nminimize the \\\"I\\\" references - need a better way to add entries.\\n\\n...\\n\\nAs I was taking out the garbage, the idea for this started to change a bit.\\nThere are several things I want to show.  My thoughts, coming through in text,\\nthe commands and responses in the terminal, shown in the logs we're keeping\\nnow, search/web history, code at different stages, and probably screenshots\\nlater.  What if this could all be syncronized somehow?  Then the reader could\\ngo through the text and see links to the code, images as we refer to them, a\\nsideline of the links we visited, and the commands/results in the terminal.  I\\nsuppose all of this kind of _is_ a web page.  The challenge comes from\\naggregating all the stuff.\\n\\n...\\n\\nI don't know how to synchronize the text to a timeline...not sure if that's\\neven useful...but I can add timestamps to the files or blocks easily enough.\\n\\n`:r !date`\\n\\nFri Nov 17 20:38:38 CST 2017\\n\\nOne of the problems I run into constantly is distraction.  I just had to reel\\nmyself back in from looking at the code used to write a Chrome plugin that\\nexports history to see if I could use a similar thing to include my browsing\\nhistory here.  There were several detours until I finally snapped out of it\\nand realized I was off course.  Adding my search results would be cool, but\\nthat's not a priority right now.  I can include links.  Evenutally, it may be\\na priority, but it's a distraction at this phase.  Shake it off and focus.\\n\\nSo what the heck are we doing?  We're trying to figure out a way to make\\nadding entries easier.\\n\\n... and immediately I'm distracted...\\n\\nI will probably forget the commands I've figured out that I want to use here,\\nso I'm going to note them in the README.\\n\\n...\\n\\nOK, I've indulged.  I took a few notes in the README.  I've found that so much\\nlearning happens tangentally to the task at hand.  I used to get so upset at\\nall the rabbit holes when I just wanted to make a thing that did blah.  I've\\nsince learned that much of the process _is_ the process of learning and\\nexploring the many subtasks that stand between you and the objective.\\n\\nBack to the main task.  How do we make it easier to add entries?  I like the\\nwhole new text file in an editor thing.\tThe terminal commands are being\\nlogged easily enough.\tMaybe we'll just make a quick script to read the\\ndirectory and spit out some JSON the app can use.\\n\\ncurrent commit: fb4ee94, fb4ee94aba4a8a6c1dba60d3cfdc3a642bc5eafb\\nhttps://github.com/reergymerej/silver-goggles/commit/fb4ee94\\n\\nWhoops.  I always forget the shebang for Node.  225841b\\n\\nhttps://stackoverflow.com/questions/24253027/node-and-shebang-help-executing-via-command-line\\n\\nFirst, we need to read the directory, then we need to spit out JSON with each\\nof the file names.  There are many very smart ways to do this, but we don't\\nneed that.  We just need a fast and easy way.  This is not a permanent or\\nperformant solution.\\n\\nIt serves us well to stop for a second and talk this through.  I was just\\nabout to refresh myself on the Node fs API before I rememembered to write what\\nI was thinking.  It is very likely I would have spent the rest of the night\\nfiguring out cool ways to read the files, written some npm module to do it,\\ngot distracted with npm configurations, and ended up stranded with some half\\nassed other chunk of code when bedtime called.\\n\\nDon't do that.\\n\\nWe've got to constantly keep ourselves in check.  So, pride be damned.  Let's\\nfind the easiest way to read files already sitting in npm waiting for us.\\n\\n...\\n\\ne7fd3a5\\n\\nWe've now got a script that reads our public directory and spits out some JSON\\nin our source directory.  We _should_ (I hope) be able to use Webpack to load\\nthis resource into the app and iterate over it.  Let's see!\\n\\n6332a4acb1cf72cd2f6e990fd8fd020470a227a4\\n\\nCool beans.  CRA is nicely configured.  Webpack's doing the magic, but CRA\\ntook care of configuring it for us.  Super easy.\\n\",\"resources\":{}},{\"commentary\":\"\\nFri Nov 17 21:37:40 CST 2017\\n\\nThis is a test to verify that new entries show up.  I also just committed the\\nlog for the terminal.  Another problem has come up.  Those logs need to be\\ntied to the entries.  For now, we'll just manually rename the to match the\\nfilename of the entry it corresponds to.\\n\\n\\nFri Nov 17 21:45:40 CST 2017\\n\\nIt's not showing the new entry in heroku.  I don't think the build step is\\nhappening, so I added\\n\\n```\\n\t\\\"heroku-postbuild\\\": \\\"./scripts/index-entries.js\\\",\\n```\\n\\nto package.json.\tThe movie my wife is watching is ending as is our session!\\nOh no!  I'm panicking.\\n\\n\\nFri Nov 17 21:53:25 CST 2017\\n\\nTo https://git.heroku.com/silver-goggles.git\\n ! [remote rejected] master -> master (pre-receive hook declined)\\nerror: failed to push some refs to 'https://git.heroku.com/silver-goggles.git'\\n~/Ideas/blog/site$ heroku config:set NODE_MODULES_CACHE=false\\nSetting NODE_MODULES_CACHE and r\\n\\n\\nAfter several rejections, turning off the NODE_MODULES_CACHE let it through.\\n\",\"resources\":{}},{\"commentary\":\"\\nSat Nov 18 06:44:19 CST 2017\\n\\nThis idea is starting to crystalize.  The problem is anyway.  It is difficult\\nto write about code in a useful way.  There is code everywhere and lots of\\narticles about it, often accompanied by code snippets or repos, but it seems\\nlike there could be a better way to do it.  Recording my screen and voice\\nwould capture everything I want, mistakes and all, but it doesn't result in a\\nsearchable string of text.\\n\\nHow can we go into \\\"record mode\\\" and capture:\\n\\n* code as it's written\\n* terminal i/o\\n* screenshots\\n* commentary\\n\",\"resources\":{}},{\"commentary\":\"\\nSat Nov 18 09:58:47 CST 2017\\n\\nThere are two issues I'm thinking of.  The first is how to record all the\\ndata.  The second is how to present it.  I'm figuring out ways to manage the\\nfirst right now, but I'd like the presentation to work outside of how the data\\nis collected.  I don't want to dictate how it's done or what tools should be\\nused.  That's not really flexible.  So, although I'm figuring it out as I go,\\nI'll just skip over the recording part for now.\\n\\nThe second part, the presentation, is what I want to focus on.  We've already\\ngot a way to read entries and show them in the browser, but let's do something\\nmore elaborate.  At a basic level, each entry in the system will contain...\\n\\n\\n* commentary - This is the meat of the system.  This is what I'm writing now\\n  and will be the primary content.\\n\\n* resources - Various types of additional content that enhance, and may be\\n  referenced by, the commentary.\\n\\n** terminal logs - what I typed, what came out\\n\\n** code - a Git log or something that can refer to code in a particular state\\n\\n** images - screenshots gathered for the commentary\\n\\n** web history - pages visited during the commentary\\n\\n\\nEventually, I want a way to present all of these together and somehow synced\\nby time.  For starters, though, let's just put them all together.\\n\\nHow will we describe them to the system?\\n\\n```\\n{\\n  \\\"commentary\\\": \\\"blah blah blah\\\",\\n  \\\"resources\\\": []\\n}\\n```\\n\\nI want the resources grouped by type.\\n\\n```\\n{\\n  \\\"commentary\\\": \\\"blah blah blah\\\",\\n  \\\"resources\\\": {\\n\t \\\"terminal\\\": \\\"blah blah blah\\\",\\n\t\\\"code\\\": \\\"xxx\\\",\\n\t\\\"images\\\": [\\n    ],\\n    \\\"web-history\\\": [\\n    ],\\n  }\\n}\\n```\\n\\nSome of these resource types will be ordered lists.  For consistency, let's\\nmake them all ordered lists, even if they contain only one thing.\\n\\n\\n```\\n{\\n  \\\"commentary\\\": \\\"blah blah blah\\\",\\n  \\\"resources\\\": {\\n\t \\\"terminal\\\": [\\n\t\\\"blah blah blah\\\"\\n\t],\\n\t\\\"code\\\": [\\n\t   \\\"xxx\\\"\\n\t],\\n\t\\\"images\\\": [\\n      \\\"xxx\\\"\\n\t  ],\\n\t  \\\"web-history\\\": [\\n\t    \\\"xxx\\\"\\n\t ],\\n  }\\n}\\n```\\n\\nIt is pretty easy to represent this stuff in the filesystem.  So we could have\\neach entry (commentary, blog... I've got to figure out the names for things)\\nreside in a directory.  That directory can optionally have subdirectories that\\ndefine the attached resources.\\n\\nTODO: We'll have to standardize the resource names.\\n\\nBefore changing everything, let's rejigger the entries we spit out of our\\n`index-entries.js` script and make sure the UI can understand this new\\nstructure.  Then we can go back and change how the entries are read by the\\nscript.\\n\",\"resources\":{}}]\nbash-3.2$ git log\n33mcommit 9a4b976641859fc2ce81abd57ba696a32348059dmm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 10:25:40 2017 -0600m\nm\n    read file contents instead of namem\nm\n33mcommit 506203990c676bcc3c875fb2bdb8bd8560593c79mm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 10:24:23 2017 -0600m\nm\n33mcommit 153792355dbadd3c43ec2e22141b66b09d9c7295mm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 10:23:16 2017 -0600m\nm\n    start altering entry indexing scriptm\nm\n33mcommit a8d411564ca1688b090482721efd73aacdc93694mm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 10:14:55 2017 -0600m\nm\n33mcommit 6f9037fec7054160f5410b5afef8e601ad246a06mm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 06:50:33 2017 -0600m\nm\n    entriesm\nm\n33mcommit c3d31b15ac1b126d27162e71e902665021303b29mm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tFri Nov 17 21:49:28 2017 -0600m\nm\n    remove entries from build stepm\nm\n33mcommit 66604ab4dc68ebbdad77d5efb504f8bd08d8944dmm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tFri Nov 17 21:47:39 2017 -0600m\nm\n    add node-dir to regular dependenciesm\nm\n33mcommit 463a4c47c49e0286c19ec1100a1c792501b4972amm\nK?1lbash-3.2$ git add src/ && git commi t-m Kt -m 'usKuseK . && git commi t-mKt -m 'include name with entry definition'\n[master de33f4a] include name with entry definition\n 3 files changed, 59 insertions(+), 3 deletions(-)\nbash-3.2$ ./scripts/Kindex-entries.js\n/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:17\n    name: fs.base(entryFileName),\n\t     ^\n\nTypeError: fs.base is not a function\n    at translateTextEntry (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:17:14)\n    at Array.map (<anonymous>)\n    at Object.<anonymous> (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:24:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Function.Module.runMain (module.js:665:10)\n    at startup (bootstrap_node.js:201:16)\nbash-3.2$ ./scripts/index-entries.js\n/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:17\n    name: fs.basename(entryFileName),\n\t     ^\n\nTypeError: fs.basename is not a function\n    at translateTextEntry (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:17:14)\n    at Array.map (<anonymous>)\n    at Object.<anonymous> (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:24:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Function.Module.runMain (module.js:665:10)\n    at startup (bootstrap_node.js:201:16)\nbash-3.2$ ./scripts/index-entries.js\nbash-3.2$ git add .\nbash-3.2$ git commit -m 'fiKx basename rKmethod call'\n[master 331c144] fix basename method call\n 3 files changed, 39 insertions(+), 3 deletions(-)\n rewrite src/entries.json (100%)\nbash-3.2$ git add . && git commit -m 'start renKdering entries'\n[master 31c1362] start rendering entries\n 2 files changed, 24 insertions(+), 4 deletions(-)\nbash-3.2$ git add .\nbash-3.2$ git commit -K-alKm '' --anKllow-empty-message\n[master 36b4bc8]\n 3 files changed, 17 insertions(+), 1 deletion(-)\nCCCCCCCCCCCCCCcommitg-m ''m--allow-empty-message' --all\nbash-3.2$ git add .\n14Pbash-3.2$CCCCCCCC1@oCCCCCCCcommit -m '' --allow-empty-message\n[master ae048fa]\n 3 files changed, 58 insertions(+), 2 deletions(-)\nCCCCCCCCCCCCCCaddc.Kmit:-m '' --allow-empty-message\nbash-3.2$ git commit -m '' --allow-empty-message\n[master 498a6e9]\n 3 files changed, 18 insertions(+), 6 deletions(-)\nbash-3.2$ git add .\nbash-3.2$ git commit -m 'show coKentries lest KistKist next to current entry'\n[master 39ee381] show entries list next to current entry\n 4 files changed, 34 insertions(+), 12 deletions(-)\nbash-3.2$ git Kadd . && git commit -Km '' --allow-empty-message\n[master 1dd78d8]\n 4 files changed, 31 insertions(+), 43 deletions(-)\n rewrite src/App.css (76%)\nbash-3.2$ exit\nexit\n\nScript done on Sat Nov 18 10:53:12 2017\n"]}},{"name":"07","commentary":"\nSat Nov 18 11:30:31 CST 2017\n\nSo we are now reading the files from the directory as we were before, but\nwe're putting out a new data structure.  The UI understands the structure so\nwe can see everything.  Let's change the way the files are being read.  It's\nnice to do it in two steps like this to minimize problems.  We know the UI can\nread it in it's new structure.  As we change the reading part, it will not\nwork.  Once it's done correctly, everything will work again.\n\nref: d88786e\n\nref: b15be57\n\nLet's try and pull the directories.\n\nref: 5bb2e5a\n\nWe've got it reading from the new structure with one file.  Now let's move the\nrest of them.\n\nref: 673df2e13989f6fc3567ea0e4e789d949b464cfa\n\nThey've been moved.  Now let's run the indexing script again and see if\neverything shows in the UI as before.\n\nref: terminal\n\n```\nError: ENOENT: no such file or directory, open '/Users/jeremygreer/Ideas/blog/site/public/entries/04/commentary.txt'\n    at Object.fs.openSync (fs.js:653:18)\n    at Object.fs.readFileSync (fs.js:554:33)\n    at getEntryFromDir (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:16:25)\n```\n\nI believe I forgot to rename the text files.  Oops.\n\nref: 551dc7d\n\nNow everything is named correcly.\n\nref: c2d1268\n\nExcept this file!  I just changed it.  Let's commit everything and push it up\nso we can start working on the resources part.\n","resources":{"terminal":["Script started on Sat Nov 18 11:30:07 2017\n?1034hbash-3.2$ ./scripts/rKindex-entries.js\n/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:15\n  const commentaryPath = path.resolve(entryFileName, 'commentary.txt')\n\t\t\t\t      ^\n\nReferenceError: entryFileName is not defined\n    at getEntryFromDir (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:15:39)\n    at Array.map (<anonymous>)\n    at Object.<anonymous> (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:25:27)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Function.Module.runMain (module.js:665:10)\n    at startup (bootstrap_node.js:201:16)\nbash-3.2$ ./scripts/index-entries.js\nbash-3.2$ ./scripts/index-entries.js\n[{\"name\":\"01\",\"commentary\":\"So I was thinking I'd like to do something meaningful.  What in the world\\ncould that be?  Helping people seems to universally work as a way to find\\nmeaning.  What can I help with?  \\\"Here's a website.\tIt will help you!\\\"  I\\ndon't know.\\n\\nMaybe starting a blog or some type of resource to help people learn to code\\nwould be cool.  There is no shortage of blogs or tech articles out there,\\nthough.\tWhat could I do differently?\\n\\nOne thing you don't see is complete honesty.  It may be unprofessional and\\nmaybe severely undermine confidence, but what if someone showed you their\\nmistakes?  Not as a gag reel or some sort of ironic thing, but more as a\\ncandid view.  That may make things more approachable.\tMistakes are valuable\\nbecause you get to learn from them, so sharing your mistakes seems like it\\nwould increase the value.\\n\\nSo, the idea is not to be an unpolished slacker, but to provide complete\\nopenness along with instruction.  To start with, a blog probably shouldn't be\\na finished, beautiful product.  It's basically an open journal, right?\\nPunctuation and grammar are fine, but it should probably be pretty rough and\\nraw.\\n\\nSo here, what the heck.\tLet's start with this.\tI'm not sure where I'm going,\\nwhat the point is, or how it will turn out, but this is my project.  From\\ninception to completion as transparent as possible, I'm going to document it.\\n\\n...\\n\\nIn the interest of _somewhat_ tolerable writing, I need to pick an audience,\\nthough.  I'm going to imagine...\\n\\nWell, I trailed off imagining myself at different points in my life when I was\\nlearing to program.\\n\\nScrew it.  I'm just going to talk to the terminal.  If I start talking to \\\"the\\naudience\\\" the tone will change and I'll start worrying too much about _how_\\nI'm saying things rather than _what_ I'm saying.\\n\\n...\\n\\nOK, so what are the goals?\\n\\n1.  Transparency - I want mistakes to be visible, ignorance to be highlighted,\\nand the documentation to be off the cuff.  This is to show that even\\nsuccessful dudes who have been writing and studying code for many years and\\nare pretty good at what they do are just regular guys full of doubt,\\nignorance, and potential mistakes.\\n\\n2.  Create a Blog - The blog should be super easy to update (to encourage it\\nhappen regularly), provide lots of detail, and have very \\\"raw\\\" content.\\n\\nI would like to get something up ASAP, so that it doesn't all appear at once\\nat the end of the project.  Honestly, most (practically all) of my projects\\ndie the day after I start them.  I get really pumped, start working, get\\nsidetracked with infrastructure or find another cooler idea along the way...\\nThere's always something, so the sooner I can get this \\\"launched\\\" the better\\nchange it has of surviving past next week.\\n\\n\\nWhat's the absolute fastest way to get an app out there into the world?  This\\nis not a paid promotion, but I bet I can get this into the world in the next\\n10 minutes with CRA and Heroku.\\n\\nHere's the plan.\\n\\n1.\tcreate the app\\n2.  post this as static content\\n3.  deploy as a new free app in Heroku\\n\\n\\n(Side note: It's going to become a pain in the ass documenting all of this\\nstuff.  Maybe I could just log the terminal history or something.)\\n\\n```\\ncreate-react-app site\\n```\\n\\nI may elaborate on all this stuff later, but maybe not.  There are plenty of\\nsources out there already.\\n\\nThis file is 01.txt in the dir above the `site` dir I just created.\\n\\n```\\n/Users/jeremygreer/Ideas/blog/\\n▼ site/\\n  ► public/\\n  ► src/\\n    package.json\\n\tREADME.md\\n    yarn.lock\\n  01.txt\\n```\\n\\nI'm sure I'll have resources _other_ than the site, but now I need to move the\\ntext into the site.\tWhat if I just symlink it and keep it separate for now?\\nI don't know what that may do.  Let's just keep it simple and move.\\n\\n```\\n</jeremygreer/Ideas/blog/site/\\n▼ public/\\n    01.txt\\n\tfavicon.ico\\n\t index.html\\n\t manifest.json\\n► src/\\n  package.json\\n  README.md\\n  yarn.lock\\n```\\n\\nOK, simple.  For the first pass, we'll just have links from the main site to\\nthe resource.  That's kind of cool.  I like the resources be just plain old\\ntext.  That makes them portable (they should probably be markdown though).\\n\\n...\\n\\nI just added a link from the boilerplate to the text file.  That works for\\nnow.  It's ocurred to me that I will be referencing code a _lot_ in this - and\\nin particular states.  I'll need a good way to document that.  Let's just rely\\non Git for now.\\n\\nThere.\tCheck 31b6c302d2ee643ef22e943a6b9a38dc891f1c0b to see where things\\nstand for now.  I'll have to make this project public and actually push it to\\nGithub.  Maybe there's a good convention for referencing SHAs in a blog.  I\\ndon't want to keep making Gists ever 12 seconds.\\n\\n...\\n\\nI just created the repo with the suggested name.  I haven't done that in a\\nwhile.  https://github.com/reergymerej/silver-goggles\\n\\nNow it's very public.  I hope work doesn't watch my commits in Github if I get\\ninspired in the middle of the day to do a little writing.\\n\\n...\\n\\nI'm trying to login to Heroku with the toolbelt, but I'm seeing some weird\\nerrors.\\n\\n```\\n~/Ideas/blog/site$ heroku login\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\tstat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n```\\n\\nI wonder if this is because of the High Sierra upgrade.  It smells like it, so\\nI opened XCode because it needs to install dependencies and get my signature\\non EULA and crap sometimes and I heard from work there may be something.  It\\ncouldn't hurt.\\n\\nnope\\n\\nDoes it work from other directories where I used to use it?\\n\\nnope\\n\\nCan I reinstall it?  I think I used brew, but I'll just check Heroku.\\n\\n...wait...\\n\\nI've got down lots of rabbit holes.  This always happens.  What am I trying to\\ndo?  Create an app in Heroku and get the URL.  I can do that through the GUI\\neasily and figure out this crap later.\\n\\n...and done 1 minute later.\\n\\nI wonder if there's a way to timestamp each line of the text document.  That\\nwould be cool to show _how long_ it takes to write the text.\\n\\n...\\n\\nDang it.\\n\\n```\\n~/Ideas/blog/site$ git remote -v\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (fetch)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (push)\\n~/Ideas/blog/site$ git remote add heroku https://git.heroku.com/silver-goggles.git\\n~/Ideas/blog/site$ git remote -v\\nheroku\\thttps://git.heroku.com/silver-goggles.git (fetch)\\nheroku\\thttps://git.heroku.com/silver-goggles.git (push)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (fetch)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (push)\\n~/Ideas/blog/site$ git status\\nOn branch master\\nYour branch is up-to-date with 'origin/master'.\\nChanges to be committed:\\n\t(use \\\"git reset HEAD <file>...\\\" to unstage)\\n\\n\\tmodified:   public/01.txt\\n\\n~/Ideas/blog/site$ fg\\nnvim .\\n\\n[1]+  Stopped\t\t       nvim .\\n~/Ideas/blog/site$ git commit -m 'setup heroku remote'\\n[master 5582472] setup heroku remote\\n 1 file changed, 54 insertions(+)\\n~/Ideas/blog/site$ git push heroku master\\nremote: !\\tYour account jeremy.greer@XXXXXXXXXXXXXXXX.com does not have access to silver-goggles.\\nfatal: unable to access 'https://git.heroku.com/silver-goggles.git/': The requested URL returned error: 403\\n~/Ideas/blog/site$ heroku login\\n ▸\t  stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\tfork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\t fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n~/Ideas/blog/site$\\n\\n```\\n\\nI guess I'll have to login with the toolbelt afterall.  :D\\n\\n```\\n\t538  brew install heroku/brew/heroku\\n\t539  brew link --overwrite heroku\\n  540  heroku login\\n```\\n\\nProblem solved.\tI have to use my personal credentials instead of work.\tI\\ninstalled a Heroku plugin to manage both, but it never seemed to work.  I just\\nget my password from Lastpass and login manually.  It's often easier to do\\nthings the dumb way.\\n\\n\\n```\\n\t544  git add .\\n  545  git status\\n  546  git commit\\n\t547  git push heroku master\\n  548  git status\\n  549  fg\\n  550  fg\\n\t551  history\\n\t552  history\\n\\n  ...\\n\\nremote: -----> Build failed\\nremote:\\nremote:\t!     Outdated Yarn lockfile\\n```\\n\\nDang it.\\n\\n```\\n\t554  yarn\\n  555  git add .\\n  556  git commit\\n  557  git push heroku master\\n  558  heroku open\\n```\\n\\nThar she blows.\\n\\nWe're online.  Now let's not suck.\\n\",\"resources\":{}}]\nbash-3.2$ ./scripts/index-entries.js\nbash-3.2$ ./scripts/index-entries.js\nundefined\nbash-3.2$ ./scripts/index-entries.js\n1\nbash-3.2$ ./scripts/index-entries.js\n[]\nbash-3.2$ ./scripts/index-entries.js\n/Users/jeremygreer/Ideas/blog/site/public/entries/01/commentary.txt\n[]\nbash-3.2$ ./scripts/index-entries.js\n/Users/jeremygreer/Ideas/blog/site/public/entries/01/commentary.txt\n[ { name: '01', resources: {} } ]\nbash-3.2$ ./scripts/index-entries.js\n[ { name: '01',\n    commentary: 'So I was thinking I\\'d like to do something meaningful.  What in the world\\ncould that be?  Helping people seems to universally work as a way to find\\nmeaning.  What can I help with?  \"Here\\'s a website.  It will help you!\"  I\\ndon\\'t know.\\n\\nMaybe starting a blog or some type of resource to help people learn to code\\nwould be cool.  There is no shortage of blogs or tech articles out there,\\nthough.  What could I do differently?\\n\\nOne thing you don\\'t see is complete honesty.  It may be unprofessional and\\nmaybe severely undermine confidence, but what if someone showed you their\\nmistakes?  Not as a gag reel or some sort of ironic thing, but more as a\\ncandid view.  That may make things more approachable.  Mistakes are valuable\\nbecause you get to learn from them, so sharing your mistakes seems like it\\nwould increase the value.\\n\\nSo, the idea is not to be an unpolished slacker, but to provide complete\\nopenness along with instruction.  To start with, a blog probably shouldn\\'t be\\na finished, beautiful product.  It\\'s basically an open journal, right?\\nPunctuation and grammar are fine, but it should probably be pretty rough and\\nraw.\\n\\nSo here, what the heck.  Let\\'s start with this.  I\\'m not sure where I\\'m going,\\nwhat the point is, or how it will turn out, but this is my project.\tFrom\\ninception to completion as transparent as possible, I\\'m going to document it.\\n\\n...\\n\\nIn the interest of _somewhat_ tolerable writing, I need to pick an audience,\\nthough.  I\\'m going to imagine...\\n\\nWell, I trailed off imagining myself at different points in my life when I was\\nlearing to program.\\n\\nScrew it.  I\\'m just going to talk to the terminal.  If I start talking to \"the\\naudience\" the tone will change and I\\'ll start worrying too much about _how_\\nI\\'m saying things rather than _what_ I\\'m saying.\\n\\n...\\n\\nOK, so what are the goals?\\n\\n1.  Transparency - I want mistakes to be visible, ignorance to be highlighted,\\nand the documentation to be off the cuff.  This is to show that even\\nsuccessful dudes who have been writing and studying code for many years and\\nare pretty good at what they do are just regular guys full of doubt,\\nignorance, and potential mistakes.\\n\\n2.  Create a Blog - The blog should be super easy to update (to encourage it\\nhappen regularly), provide lots of detail, and have very \"raw\" content.\\n\\nI would like to get something up ASAP, so that it doesn\\'t all appear at once\\nat the end of the project.  Honestly, most (practically all) of my projects\\ndie the day after I start them.\tI get really pumped, start working, get\\nsidetracked with infrastructure or find another cooler idea along the way...\\nThere\\'s always something, so the sooner I can get this \"launched\" the better\\nchange it has of surviving past next week.\\n\\n\\nWhat\\'s the absolute fastest way to get an app out there into the world?\tThis\\nis not a paid promotion, but I bet I can get this into the world in the next\\n10 minutes with CRA and Heroku.\\n\\nHere\\'s the plan.\\n\\n1.\tcreate the app\\n2.  post this as static content\\n3.  deploy as a new free app in Heroku\\n\\n\\n(Side note: It\\'s going to become a pain in the ass documenting all of this\\nstuff.  Maybe I could just log the terminal history or something.)\\n\\n```\\ncreate-react-app site\\n```\\n\\nI may elaborate on all this stuff later, but maybe not.  There are plenty of\\nsources out there already.\\n\\nThis file is 01.txt in the dir above the `site` dir I just created.\\n\\n```\\n/Users/jeremygreer/Ideas/blog/\\n▼ site/\\n  ► public/\\n  ► src/\\n    package.json\\n\t README.md\\n\tyarn.lock\\n  01.txt\\n```\\n\\nI\\'m sure I\\'ll have resources _other_ than the site, but now I need to move the\\ntext into the site.  What if I just symlink it and keep it separate for now?\\nI don\\'t know what that may do.  Let\\'s just keep it simple and move.\\n\\n```\\n</jeremygreer/Ideas/blog/site/\\n▼ public/\\n\t 01.txt\\n    favicon.ico\\n    index.html\\n    manifest.json\\n► src/\\n  package.json\\n  README.md\\n  yarn.lock\\n```\\n\\nOK, simple.  For the first pass, we\\'ll just have links from the main site to\\nthe resource.  That\\'s kind of cool.  I like the resources be just plain old\\ntext.  That makes them portable (they should probably be markdown though).\\n\\n...\\n\\nI just added a link from the boilerplate to the text file.  That works for\\nnow.  It\\'s ocurred to me that I will be referencing code a _lot_ in this - and\\nin particular states.  I\\'ll need a good way to document that.  Let\\'s just rely\\non Git for now.\\n\\nThere.  Check 31b6c302d2ee643ef22e943a6b9a38dc891f1c0b to see where things\\nstand for now.  I\\'ll have to make this project public and actually push it to\\nGithub.  Maybe there\\'s a good convention for referencing SHAs in a blog.  I\\ndon\\'t want to keep making Gists ever 12 seconds.\\n\\n...\\n\\nI just created the repo with the suggested name.  I haven\\'t done that in a\\nwhile.  https://github.com/reergymerej/silver-goggles\\n\\nNow it\\'s very public.  I hope work doesn\\'t watch my commits in Github if I get\\ninspired in the middle of the day to do a little writing.\\n\\n...\\n\\nI\\'m trying to login to Heroku with the toolbelt, but I\\'m seeing some weird\\nerrors.\\n\\n```\\n~/Ideas/blog/site$ heroku login\\n ▸\t stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\t  stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\tfork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n```\\n\\nI wonder if this is because of the High Sierra upgrade.  It smells like it, so\\nI opened XCode because it needs to install dependencies and get my signature\\non EULA and crap sometimes and I heard from work there may be something.  It\\ncouldn\\'t hurt.\\n\\nnope\\n\\nDoes it work from other directories where I used to use it?\\n\\nnope\\n\\nCan I reinstall it?  I think I used brew, but I\\'ll just check Heroku.\\n\\n...wait...\\n\\nI\\'ve got down lots of rabbit holes.\tThis always happens.  What am I trying to\\ndo?\tCreate an app in Heroku and get the URL.  I can do that through the GUI\\neasily and figure out this crap later.\\n\\n...and done 1 minute later.\\n\\nI wonder if there\\'s a way to timestamp each line of the text document.  That\\nwould be cool to show _how long_ it takes to write the text.\\n\\n...\\n\\nDang it.\\n\\n```\\n~/Ideas/blog/site$ git remote -v\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (fetch)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (push)\\n~/Ideas/blog/site$ git remote add heroku https://git.heroku.com/silver-goggles.git\\n~/Ideas/blog/site$ git remote -v\\nheroku\\thttps://git.heroku.com/silver-goggles.git (fetch)\\nheroku\\thttps://git.heroku.com/silver-goggles.git (push)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (fetch)\\norigin\\tgit@github.com:reergymerej/silver-goggles.git (push)\\n~/Ideas/blog/site$ git status\\nOn branch master\\nYour branch is up-to-date with \\'origin/master\\'.\\nChanges to be committed:\\n\t(use \"git reset HEAD <file>...\" to unstage)\\n\\n\\tmodified:   public/01.txt\\n\\n~/Ideas/blog/site$ fg\\nnvim .\\n\\n[1]+  Stopped\t\t     nvim .\\n~/Ideas/blog/site$ git commit -m \\'setup heroku remote\\'\\n[master 5582472] setup heroku remote\\n 1 file changed, 54 insertions(+)\\n~/Ideas/blog/site$ git push heroku master\\nremote: !\\tYour account jeremy.greer@XXXXXXXXXXXXXXXX.com does not have access to silver-goggles.\\nfatal: unable to access \\'https://git.heroku.com/silver-goggles.git/\\': The requested URL returned error: 403\\n~/Ideas/blog/site$ heroku login\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸\t  fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    stat /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n ▸    fork/exec /Users/jeremygreer/.local/share/heroku/client/bin/heroku: not a directory\\n~/Ideas/blog/site$\\n\\n```\\n\\nI guess I\\'ll have to login with the toolbelt afterall.  :D\\n\\n```\\n  538\tbrew install heroku/brew/heroku\\n  539\tbrew link --overwrite heroku\\n\t540  heroku login\\n```\\n\\nProblem solved.  I have to use my personal credentials instead of work.  I\\ninstalled a Heroku plugin to manage both, but it never seemed to work.  I just\\nget my password from Lastpass and login manually.  It\\'s often easier to do\\nthings the dumb way.\\n\\n\\n```\\n  544  git add .\\n  545  git status\\n  546  git commit\\n  547  git push heroku master\\n  548\tgit status\\n  549  fg\\n  550  fg\\n  551  history\\n  552  history\\n\\n  ...\\n\\nremote: -----> Build failed\\nremote:\\nremote:  !\t  Outdated Yarn lockfile\\n```\\n\\nDang it.\\n\\n```\\n  554  yarn\\n  555  git add .\\n  556\tgit commit\\n  557  git push heroku master\\n  558  heroku open\\n```\\n\\nThar she blows.\\n\\nWe\\'re online.  Now let\\'s not suck.\\n',\n    resources: {} } ]\nbash-3.2$ ./scripts/index-entries.js\nbash-3.2$ ls\nREADME.md\tbuild\t\tpackage.json\tpublic\t\tsrc\t\tyarn.lock\nREADME.md~\tnode_modules\tpackage.json~\tscripts \tterminal.log\nbash-3.2$ cd public/\nbash-3.2$ ls\n01.txt~ \t03.txt~ \t05.txt\t\t06.txt\t\t07.txt~ \tindex.html\n02.txt~ \t04.txt\t\t05.txt~ \t06.txt~ \tentries \tmanifest.json\n03.txt\t\t04.txt~ \t06.terminal.log 07.txt\t\tfavicon.ico\tterminal-logs\nbash-3.2$ mkdir 03\nbash-3.2$ mv 03.txt 03/commentary.txt\nbash-3.2$ ls\n01.txt~ \t03.txt~ \t05.txt\t\t06.txt\t\t07.txt~ \tindex.html\n02.txt~ \t04.txt\t\t05.txt~ \t06.txt~ \tentries \tmanifest.json\n03\t\t04.txt~ \t06.terminal.log 07.txt\t\tfavicon.ico\tterminal-logs\nbash-3.2$ find . -type f\n./03/commentary.txt\n./05.txt~\n./favicon.ico\n./07.txt\n./index.html\n./entries/02/commentary.txt\n./entries/01/commentary.txt\n./06.txt\n./04.txt~\n./04.txt\n./05.txt\n./03.txt~\n./02.txt~\n./01.txt~\n./manifest.json\n./07.txt~\n./terminal-logs/03.terminal.log\n./06.terminal.log\n./06.txt~\nbash-3.2$ find . -type f -name \".txtK~\"\nbash-3.2$ find . -type f -name \"*.txt~\"\n./05.txt~\n./04.txt~\n./03.txt~\n./02.txt~\n./01.txt~\n./07.txt~\n./06.txt~\nbash-3.2$ find . -type f -name \"*.txt~\" -delete\nbash-3.2$ find . -type f -name \"*.txt~\"K-delete\nbash-3.2$ ls\n03\t\t05.txt\t\t06.txt\t\tentries \tindex.html\tterminal-logs\n04.txt\t\t06.terminal.log 07.txt\t\tfavicon.ico\tmanifest.json\nbash-3.2$ mkKdir 04/ && mv\u0007  04.txt ./04\nbash-3.2$ ls\n03\t\t05.txt\t\t06.txt\t\tentries \tindex.html\tterminal-logs\n04\t\t06.terminal.log 07.txt\t\tfavicon.ico\tmanifest.json\nbash-3.2$ mkdir 05\nbash-3.2$ mv K05K.txt 05\nbash-3.2$ mv 06\nusage: mv [-f | -i | -n] [-v] source target\n       mv [-f | -i | -n] [-v] source ... directory\nbash-3.2$ ls\n03\t\t05\t\t06.txt\t\tentries \tindex.html\tterminal-logs\n04\t\t06.terminal.log 07.txt\t\tfavicon.ico\tmanifest.json\nbash-3.2$ mkdir 06\nbash-3.2$ ls\n03\t\t05\t\t06.terminal.log 07.txt\t\tfavicon.ico\tmanifest.json\n04\t\t06\t\t06.txt\t\tentries \tindex.html\tterminal-logs\nbash-3.2$ mv 0K6.* ./06\nbash-3.2$ ls\n03\t\t05\t\t07.txt\t\tfavicon.ico\tmanifest.json\n04\t\t06\t\tentries \tindex.html\tterminal-logs\nbash-3.2$ mkdir 07\nbash-3.2$ mv 07K.txt 07\nbash-3.2$ ls\n03\t\t05\t\t07\t\tfavicon.ico\tmanifest.json\n04\t\t06\t\tentries \tindex.html\tterminal-logs\nbash-3.2$ mv 0* ./entries/\nbash-3.2$ ls\nentries \tfavicon.ico\tindex.html\tmanifest.json\tterminal-logs\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mdeleted:    02.txtm\n\t31mdeleted:    03.txtm\n\t31mdeleted:    04.txtm\n\t31mdeleted:    05.txtm\n\t31mdeleted:    06.terminal.logm\n\t31mdeleted:    06.txtm\n\t31mdeleted:    07.txtm\n\t31mmodified:   ../scripts/index-entries.jsm\n\t31mmodified:   ../terminal.logm\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mentries/02/m\n\t31mentries/03/m\n\t31mentries/04/m\n\t31mentries/05/m\n\t31mentries/06/m\n\t31mentries/07/m\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git add .\nbash-3.2$ git rm ../terminal.logKreset ../terminal.log\nUnstaged changes after reset:\nM\tscripts/index-entries.js\nM\tterminal.log\nbash-3.2$ git aKgit commit -m 'move entries into new structure'\n[master 673df2e] move entries into new structure\n 7 files changed, 5 insertions(+)\n rename public/{02.txt => entries/02/commentary.txt} (100%)\n rename public/{03.txt => entries/03/commentary.txt} (100%)\n rename public/{ => entries/04}/04.txt (100%)\n rename public/{ => entries/05}/05.txt (100%)\n rename public/{ => entries/06}/06.terminal.log (100%)\n rename public/{ => entries/06}/06.txt (100%)\n rename public/{ => entries/07}/07.txt (83%)\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 4 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   ../scripts/index-entries.jsm\n\t31mmodified:   ../terminal.logm\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ cd ..\nbash-3.2$ pwKd\n/Users/jeremygreer/Ideas/blog/site\nbash-3.2$ git adKgit log\n33mcommit 673df2e13989f6fc3567ea0e4e789d949b464cfamm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 12:10:05 2017 -0600m\nm\n    move entries into new structurem\nm\n33mcommit 5bb2e5ae950a7142b039907dc9044f5ed450c372mm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 11:56:41 2017 -0600m\nm\n    verify that we can read from the new structure 01m\nm\n33mcommit b15be579f08aa0ab4a6150873773ece583ee5d89mm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 11:51:33 2017 -0600m\nm\n33mcommit d88786efdfaa9983c9c93e7eeadcd989a65259damm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 11:38:06 2017 -0600m\nm\n    start moving commentary sources into new structurem\nm\n33mcommit 27d8d08985a3f4cbca75b6efca9c6cb3ac8a0a7dmm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 10:54:59 2017 -0600m\nm\n    finish 06m\nm\n33mcommit 1dd78d831acaecaa67ee090a880e665d51eba2dfmm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 10:52:20 2017 -0600m\nm\n33mcommit 39ee381b8482d1df4f71d536c77ecc1b292c2ccemm\nAuthor: Jeremy Greer <jeremy.greer.atl@gmail.com>m\nDate:\tSat Nov 18 10:48:19 2017 -0600m\nm\n    show entries list next to current entrym\nm\n33mcommit 498a6e993a9f0cd8ba3e460c605bf25ea631c3a7mm\nK?1lbash-3.2$ ./scripts/index-entries.js\nfs.js:653\n  return binding.open(pathModule._makeLong(path), stringToFlags(flags), mode);\n\t\t ^\n\nError: ENOENT: no such file or directory, open '/Users/jeremygreer/Ideas/blog/site/public/entries/04/commentary.txt'\n    at Object.fs.openSync (fs.js:653:18)\n    at Object.fs.readFileSync (fs.js:554:33)\n    at getEntryFromDir (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:16:25)\n    at Array.map (<anonymous>)\n    at Object.<anonymous> (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:25:27)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\nbash-3.2$ cd public/entries/\nbash-3.2$ ls\n01\t02\t03\t04\t05\t06\t07\nbash-3.2$ find . -nKtype -texKf\nfind: -type: -f: unknown type\nbash-3.2$ find . -type -Kf\n./03/commentary.txt\n./04/04.txt\n./05/05.txt\n./02/commentary.txt\n./07/07.txt\n./01/commentary.txt\n./06/06.txt\n./06/06.terminal.log\nbash-3.2$ find . -type Kmv 0K4/04.txt 04/commentary.txt\nbash-3.2$ mv 04/04.txt 04/commentary.txK5/05.txt 05/commentary.txt\nbash-3.2$ mv 05/05.txt 05/commentary.txK6/06.txt 06/commentary.txt\nbash-3.2$ mv 06/06.terminal.log 06/terminal.log\nCCCCCCCCCC16Pfind4.t-type/1Pfmentary.txtxtl.log\n./03/commentary.txt\n./04/commentary.txt\n./05/commentary.txt\n./02/commentary.txt\n./07/07.txt\n./01/commentary.txt\n./06/terminal.log\n./06/commentary.txt\nbash-3.2$ mv 07/07.txt 07/commentary.txt\nCCCCCCCCCC16Pfind7.t-type/fommentary.txt\n./03/commentary.txt\n./04/commentary.txt\n./05/commentary.txt\n./02/commentary.txt\n./07/commentary.txt\n./01/commentary.txt\n./06/terminal.log\n./06/commentary.txt\nbash-3.2$ git add .\nbash-3.2$ git commit -m 'change entry assets to new convention'\n[master 551dc7d] change entry assets to new convention\n 5 files changed, 0 insertions(+), 0 deletions(-)\n rename public/entries/04/{04.txt => commentary.txt} (100%)\n rename public/entries/05/{05.txt => commentary.txt} (100%)\n rename public/entries/06/{06.txt => commentary.txt} (100%)\n rename public/entries/06/{06.terminal.log => terminal.log} (100%)\n rename public/entries/07/{07.txt => commentary.txt} (100%)\nbash-3.2$ ./scKcd ..\nbash-3.2$ KsKpwd\n/Users/jeremygreer/Ideas/blog/site/public\nbash-3.2$ cd ..\nbash-3.2$ ./scripts/index-entries.js\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 5 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   public/entries/07/commentary.txtm\n\t31mmodified:   scripts/index-entries.jsm\n\t31mmodified:   src/entries.jsonm\n\t31mmodified:   terminal.logm\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git Kgit add public/ scripts/sK src/\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 5 commits.\n  (use \"git push\" to publish your local commits)\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\t32mmodified:   public/entries/07/commentary.txtm\n\t32mmodified:   scripts/index-entries.jsm\n\t32mmodified:   src/entries.jsonm\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   terminal.logm\n\nbash-3.2$ git commit\n?1000h?2004h?1049h?1h?2004h1;40r?12;25h?12l?25h27mm38;5;252m48;5;234mH2J?25l40;1H\"~/Ideas/blog/site/.git/COMMIT_EDITMSG\" 15L, 472C2;1H▽6n2;1H  1;1H>c1;1H38;5;208m48;5;235m1   m38;5;252m48;5;234m48;5;236m\t\t\t\t\t\t\t\t\t\t\t\t   m38;5;252m48;5;234m2;1H38;5;243m48;5;235m  1 m38;5;252m48;5;234m38;5;59m# Please enter the commit message for your changes. Lines startingm38;5;252m48;5;234m\n38;5;243m48;5;235m  2 m38;5;252m48;5;234m38;5;59m# with '#' will be ignored, and an empty message aborts the commit.m38;5;252m48;5;234m\n38;5;243m48;5;235m  3 m38;5;252m48;5;234m38;5;59m# On branch m38;5;252m48;5;234m38;5;141mmasterm38;5;252m48;5;234m\n38;5;243m48;5;235m  4 m38;5;252m48;5;234m38;5;59m# Your branch is ahead of 'm38;5;252m48;5;234m38;5;141morigin/masterm38;5;252m48;5;234m38;5;59m' by 5 commits.m38;5;252m48;5;234m\n38;5;243m48;5;235m  5 m38;5;252m48;5;234m38;5;59m#   (use \"git push\" to publish your local commits)m38;5;252m48;5;234m\n38;5;243m48;5;235m  6 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m  7 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges to be committed:m38;5;252m48;5;234m\n38;5;243m48;5;235m  8 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  public/entries/07/commentary.txtm38;5;252m48;5;234m\n38;5;243m48;5;235m  9 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  scripts/index-entries.jsm38;5;252m48;5;234m\n38;5;243m48;5;235m 10 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  src/entries.jsonm38;5;252m48;5;234m\n38;5;243m48;5;235m 11 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n38;5;243m48;5;235m 12 m38;5;252m48;5;234m38;5;59m# m38;5;252m48;5;234m38;5;148mChanges not staged for commit:m38;5;252m48;5;234m\n38;5;243m48;5;235m 13 m38;5;252m48;5;234m38;5;59m#\t m38;5;252m48;5;234m38;5;81mmodifiedm38;5;252m48;5;234m38;5;59m: m38;5;252m48;5;234m38;5;141m  terminal.logm38;5;252m48;5;234m\n38;5;243m48;5;235m 14 m38;5;252m48;5;234m38;5;59m#m38;5;252m48;5;234m\n?25l?1002l?2004l\".git/COMMIT_EDITMSG\" 15L, 516C written \t\t\t\t\t\t     17;1H~\t\t\t\t\t\t\t\t\t\t\t\t      18;1H~\t\t\t\t\t\t\t\t\t\t\t\t       19;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t20;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 21;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  22;1H~\t\t\t\t\t\t\t\t\t\t\t\t   23;1H~\t\t\t\t\t\t\t\t\t\t\t\t    24;1H~\t\t\t\t\t\t\t\t\t\t\t\t     25;1H~\t\t\t\t\t\t\t\t\t\t\t\t      26;1H~\t\t\t\t\t\t\t\t\t\t\t\t       27;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t28;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 29;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  30;1H~\t\t\t\t\t\t\t\t\t\t\t\t   31;1H~\t\t\t\t\t\t\t\t\t\t\t\t    32;1H~\t\t\t\t\t\t\t\t\t\t\t\t     33;1H~\t\t\t\t\t\t\t\t\t\t\t\t      34;1H~\t\t\t\t\t\t\t\t\t\t\t\t       35;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t36;1H~\t\t\t\t\t\t\t\t\t\t\t\t\t 37;1H~ \t\t\t\t\t\t\t\t\t\t\t\t  38;1H~\t\t\t\t\t\t\t\t\t\t\t\t   m38;5;252m48;5;234m39;1H7m38;5;59m48;5;234m.git/COMMIT_EDITMSG\t\t\t\t\t\t\t\t1,0-1\t       All1;5H?12l?25h?1000l?1002h?25lm38;5;252m48;5;234m40;90Hi1;5H40;90H 1;5H40;1H38;5;186m-- INSERT --m38;5;252m48;5;234m40;13HK39;85H7m38;5;59m48;5;234m1  1;5H?12l?25h?25lm38;5;252m48;5;234m40;1HK39;85H7m38;5;59m48;5;234m0-11;5H?12l?25h?25lm38;5;252m48;5;234m40;90H:1;5H40;90HK40;1H:?2004h?12l?25h?25l1;5H?12l?25h?25l40;90Hi1;5H40;90H 1;5H40;1H38;5;186m-- INSERT --m38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m1\t1;5H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mmm38;5;252m48;5;234m39;21H7m38;5;59m48;5;234m[+]61C21;6H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mom38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m31;7H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mvm38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m41;8H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mem38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m51;9H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mdm38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m61;10H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236m m38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m71;11H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mtm38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m81;12H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mhm38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m91;13H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mem38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m101;14H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236m m38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m11;15H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mcm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m21;16H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mum38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m31;17H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mrm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m41;18H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mrm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m51;19H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mem38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m61;20H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mnm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m71;21H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mtm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m81;22H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236m m38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m91;23H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mem38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m201;24H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mnm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m11;25H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mtm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m21;26H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mrm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m31;27H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mym38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m41;28H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236m m38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m51;29H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mtm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m61;30H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mom38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m71;31H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236m m38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m81;32H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mtm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m91;33H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mhm38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m301;34H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mem38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m11;35H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236m m38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m21;36H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mnm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m31;37H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mem38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m41;38H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mwm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m51;39H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236m m38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m61;40H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236msm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m71;41H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mtm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m81;42H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mrm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m91;43H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mum38;5;252m48;5;234m39;85H7m38;5;59m48;5;234m401;44H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mcm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m11;45H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mtm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m21;46H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mum38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m31;47H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mrm38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m41;48H?12l?25h?25lm38;5;252m48;5;234m38;5;81m48;5;236mem38;5;252m48;5;234m39;86H7m38;5;59m48;5;234m51;49H?12l?25h?25lm38;5;252m48;5;234m40;1HK39;86H7m38;5;59m48;5;234m41;48H?12l?25h?25lm38;5;252m48;5;234m40;90H:1;48H40;90HK40;1H:?2004h?12l?25hwq\n39;49m?2004l?1l?12l?25h?1049l[master c2d1268] moved the current entry to the new structure\n 3 files changed, 22 insertions(+), 3 deletions(-)\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 6 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   terminal.logm\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ exit\nexit\n\nScript done on Sat Nov 18 12:19:08 2017\n"]}},{"name":"08","commentary":"\nSat Nov 18 12:27:26 CST 2017\n\nNow that we're reading the structures, here are the things jumping out:\n\n1.  It's becoming more difficult to create an entry.  It's not exactly hard,\nbut I want to make it dummy proof.\n\n2.  Since we're creating an inventory in JSON of the entries (to simulate a\nDB) we don't really _have_ to keep the assets in the public part.  However, I\ndig the graceful degredation.  For whatever reason, if there's no JS, the\nassets are still out there and understandable.  Again, the text commentary is\nthe real data.  Everything else is just presentation.  Let's leave the assets\npublic so they can exist \"on their own.\"\n\n\nLet's deal with #1 first.  We could script something, but... meh... I don't\nwant focus on _how_ the assets are created.  For now, we'll just put a note in\nthe README of what to do when starting a new entry.\n\n\nhttps://stackoverflow.com/questions/3637660/how-to-exclude-file-only-from-root-folder-in-git\n\nref:git:934b4d9\n\n...\n\nSo to support non-js environments, theoretical old webspiders and paranoid\nnerds with text-based browsers, let's change the links in our UI to point to\nthe static assets.  If JS is off, the native browser instructions will still\nwork.\n\nref:git:87bc6e2\n\nIt works, not let's refactor a bit.\n\nref:git:ffe7031\n\nLooking good.\n\n...\n\nOne of the problems I see a lot is preemptive design.  It generally takes the\nform of a bunch of people who don't really understand the problem, half-paying\nattention, prescribing technical designs geared toward showing the other\npeople in the room how smart they are.  That's usually through extensive\ncomplexity or anticipation of all sorts of scenarios that may (or probably\n_won't_) come up.\n\nThis is lame.\n\nIt breeds complexity and creates a ton of burden on the system.  Those things\nlead to bugs and systems that almost impossible to comprehend and terrible to\nwork in.\n\nI get the appeal, though.  It's fun to brainstorm and think of all the what\nifs, but it's like a paranoia.  I'm not advocating for driving blind, just\nmaking small sensible improvements.  Along those lines, I'm sure I could sit\nwith a whiteboard or notepad and figure out the optimal data structure for the\nentities we're using here, a system to succinctly reference related assets,\nand a clever way to tie it all together, but there's a very real danger I\ncould get stuck in some planning mania.  I'd end up in a frenzy of design and\neventually have system with lots of complexity, mandated only by my\nimagination.  And I'd probably have lots of oversights, too.\n\nIt's fun to do this and I've done it many times, but we're doing something\ndifferent here.  It's all baby steps.  As an example, I know we want to\nreference resources from our commentary somehow, but I'm not sure _how_ we're\ngoing to do that yet.  I put in some links and a few `ref` notes.  Those have\nevolved naturally to include the _type_ of resource as well as the unique ID,\nso now it's `ref:git:ffe7031`.  The data structure has evolved in a similar\nway as you've seen, just like the way we create new entries and save logs has\nchanged due to necessity.  My hope is that allowing things to evolve\norganically like this will provide a much more natural, enjoyable, and stable\nsystem that one designed beforehand.\n","resources":{"terminal":["Script started on Sat Nov 18 12:40:53 2017\n?1034hbash-3.2$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   README.mdm\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mpublic/entries/08/m\n\t31mterminal.logm\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   .gitignorem\n\t31mmodified:   README.mdm\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mpublic/entries/08/m\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git add .gitignore\nbash-3.2$ git ocmKcommit -m 'ignore unclean terminal.log'\n[master 3e10f87] ignore unclean terminal.log\n 1 file changed, 2 insertions(+)\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   README.mdm\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mpublic/entries/08/m\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git add .gitignore\nbash-3.2$ git diff --cached\n1mdiff --git a/.gitignore b/.gitignoremm\n1mindex ac050b6..2d26ae5 100644mm\n1m--- a/.gitignoremm\n1m+++ b/.gitignoremm\n36m@@ -20,4 +20,4 @@m mnpm-debug.log*mm\n yarn-debug.log*mm\n yarn-error.log*mm\n mm\n31m-terminal.logmm\n32m+m32m/terminal.logmm\nK?1lbash-3.2$ git commit -m 'ingoreKgnore _ONLY_ terminal.log at root'\n[master 303ed12] ignore _ONLY_ terminal.log at root\n 1 file changed, 1 insertion(+), 1 deletion(-)\nbash-3.2$ git push\nCounting objects: 6, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 626 bytes | 0 bytes/s, done.\nTotal 6 (delta 4), reused 0 (delta 0)\nremote: Resolving deltas: 100% (4/4), completed with 2 local objects.K\nTo git@github.com:reergymerej/silver-goggles.git\n   c5bc644..303ed12  master -> master\nbash-3.2$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   README.mdm\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mpublic/entries/08/m\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git add README.md\nbash-3.2$ git commit -m 'add notes on how to craeteKeate  Ka new entry'\n[master 934b4d9] add notes on how to create a new entry\n 1 file changed, 37 insertions(+)\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   src/App.jsm\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mpublic/entries/08/m\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git add s\u0007\nfatal: pathspec 's' did not match any files\nbash-3.2$ git add src/\nbash-3.2$ git commit -m 'use actual link to asKcommentary'\n[master 87bc6e2] use actual link to commentary\n 1 file changed, 1 insertion(+), 1 deletion(-)\nbash-3.2$ ./scripts/Kindex-entries.js\nbash-3.2$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 2 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\t31mmodified:   src/App.jsm\n\t31mmodified:   src/entries.jsonm\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\t31mpublic/entries/08/m\n\t31msrc/ClickableEntry.jsm\n\t31msrc/Entry.jsm\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nbash-3.2$ git add src\nbash-3.2$ git commit -m 'refactor UI, puKmove components into own Kfiles'\n[master ffe7031] move components into own files\n 4 files changed, 39 insertions(+), 31 deletions(-)\n create mode 100644 src/ClickableEntry.js\n create mode 100644 src/Entry.js\nbash-3.2$ git push\nCounting objects: 14, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (14/14), done.\nWriting objects: 100% (14/14), 3.24 KiB | 0 bytes/s, done.\nTotal 14 (delta 8), reused 0 (delta 0)\nremote: Resolving deltas: 100% (8/8), completed with 4 local objects.K\nTo git@github.com:reergymerej/silver-goggles.git\n   303ed12..ffe7031  master -> master\nbash-3.2$ exit\nexit\n\nScript done on Sat Nov 18 13:58:56 2017\n"]}},{"name":"09","commentary":"\nSat Nov 18 14:14:15 CST 2017\n\nLet's show some resources!\n\n```\n▼ public/\n  ▼ entries/\n    ▼ 01/\n        commentary.txt\n    ▼ 02/\n        commentary.txt\n    ▼ 03/\n        commentary.txt\n    ▼ 04/\n        commentary.txt\n    ▼ 05/\n        commentary.txt\n    ▼ 06/\n        commentary.txt\n        terminal.log\n    ▼ 07/\n        commentary.txt\n        terminal.log\n    ▼ 08/\n        commentary.txt\n        terminal.log\n```\n\n#note Maybe directory trees are another type of resource we want to show.\n\nref:git:b4f06a2\n\nI thought read would fail for missing files, so this isn't really unexpected.\n\nref:terminal\n\n```\nbash-3.2$ ./scripts/index-entries.js\nfs.js:653\n  return binding.open(pathModule._makeLong(path), stringToFlags(flags), mode);\n                 ^\n\nError: ENOENT: no such file or directory, open '/Users/jeremygreer/Ideas/blog/site/public/entries/01/terminal.log'\n    at Object.fs.openSync (fs.js:653:18)\n    at Object.fs.readFileSync (fs.js:554:33)\n    at getEntryFromDir (/Users/jeremygreer/Ideas/blog/site/scripts/index-entries.js:18:26)\n```\n\nTODO: We need to prefix each command in the terminal.log with a timestamp so\nwe have some way to tie references here to there.\n\nWe need to handle reading the terminal logs more gracefully.\n","resources":{"terminal":[null]}}]